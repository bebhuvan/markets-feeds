---
export const prerender = true;

import Layout from '../layouts/Layout.astro';
import ThemeToggle from '../components/ThemeToggle.astro';
import Navigation from '../components/Navigation.astro';
import LinkCard from '../components/LinkCard.astro';
import type { FeedItem } from '../types';
import { RSS_SOURCES } from '../config/sources';
import { formatDistanceToNow } from '../utils/date';
import '../styles/global.css';

// Load recent link data for performance - limit to latest 35 files (1+ month)
const linkFiles = await Astro.glob('../content/links/*.json');
const sortedFiles = linkFiles.sort((a, b) => {
  const dateA = a.url?.match(/(\d{4}-\d{2}-\d{2})\.json$/)?.[1] || '0000-00-00';
  const dateB = b.url?.match(/(\d{4}-\d{2}-\d{2})\.json$/)?.[1] || '0000-00-00';
  return dateB.localeCompare(dateA);
});

// Load the latest 35 files (approximately 1+ month of data)  
const recentFiles = sortedFiles.slice(0, 35);
const allLinks: FeedItem[] = [];

for (const file of recentFiles) {
  if (Array.isArray(file.default)) {
    allLinks.push(...file.default);
  }
}

// Sort by published date
allLinks.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());

// Pagination logic
const ARTICLES_PER_PAGE = 100;
const currentPage = parseInt(Astro.url.searchParams.get('page') || '1');
const totalPages = Math.ceil(allLinks.length / ARTICLES_PER_PAGE);
const startIndex = (currentPage - 1) * ARTICLES_PER_PAGE;
const endIndex = startIndex + ARTICLES_PER_PAGE;
const displayedLinks = allLinks.slice(startIndex, endIndex);

// Pagination info
const showingStart = startIndex + 1;
const showingEnd = Math.min(endIndex, allLinks.length);
const hasPrevPage = currentPage > 1;
const hasNextPage = currentPage < totalPages;

// Get the actual last update time from the most recent article
const lastUpdateTime = allLinks.length > 0 
  ? new Date(Math.max(...allLinks.map(link => new Date(link.fetchedAt || link.publishedAt).getTime())))
  : new Date();

// Generate cache-busting timestamp  
const buildTime = new Date().toISOString();
const buildId = Math.random().toString(36).substring(7);

// Calculate source counts
const sourceCounts = allLinks.reduce((acc, link) => {
  acc[link.sourceId] = (acc[link.sourceId] || 0) + 1;
  return acc;
}, {} as Record<string, number>);

// Calculate category counts
const categoryCounts = allLinks.reduce((acc, link) => {
  acc[link.category] = (acc[link.category] || 0) + 1;
  return acc;
}, {} as Record<string, number>);

// Group sources by category
const sourcesByCategory = RSS_SOURCES.reduce((acc, source) => {
  if (!acc[source.category]) {
    acc[source.category] = [];
  }
  acc[source.category].push({
    ...source,
    count: sourceCounts[source.id] || 0
  });
  return acc;
}, {} as Record<string, any[]>);

// Category display names - clean 7-category system
const categoryLabels = {
  markets: 'Markets',
  macro: 'Economics',
  policy: 'Policy',
  research: 'Research', 
  technology: 'Technology',
  'non-money': 'General',
  blogs: 'Blogs'
};
---

<Layout title="Markets Feeds">
  <!-- Header -->
  <header class="header">
    <div class="container">
      <div class="header-content">
        <div class="logo">
          <a href="/" class="logo-link">Markets Feeds</a>
        </div>
        <nav class="header-nav">
          <a href="/" class="nav-link" data-filter="all">
            All
            <span class="nav-count">{allLinks.length}</span>
          </a>
          <a href="#" class="nav-link" data-filter="markets">
            Markets
            <span class="nav-count">{categoryCounts.markets || 0}</span>
          </a>
          <a href="#" class="nav-link" data-filter="macro">
            Economics
            <span class="nav-count">{categoryCounts.macro || 0}</span>
          </a>
          <a href="#" class="nav-link" data-filter="policy">
            Policy
            <span class="nav-count">{categoryCounts.policy || 0}</span>
          </a>
          <a href="#" class="nav-link" data-filter="research">
            Research
            <span class="nav-count">{categoryCounts.research || 0}</span>
          </a>
          <a href="#" class="nav-link" data-filter="technology">
            Technology
            <span class="nav-count">{categoryCounts.technology || 0}</span>
          </a>
          <a href="#" class="nav-link" data-filter="non-money">
            General
            <span class="nav-count">{categoryCounts['non-money'] || 0}</span>
          </a>
          <a href="#" class="nav-link" data-filter="blogs">
            Blogs
            <span class="nav-count">{categoryCounts.blogs || 0}</span>
          </a>
          <a href="#" class="nav-link" data-filter="videos">
            Videos
            <span class="nav-count">{categoryCounts.videos || 0}</span>
          </a>
          <a href="/discover" class="nav-link secondary">Discovery</a>
        </nav>
        <div class="header-meta">
          <span class="meta-text">Updated: {lastUpdateTime.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', timeZone: 'Asia/Kolkata' })} 
            <span class="build-info" title={`Build: ${buildTime} | ID: ${buildId}`}>üîÑ{buildId}</span>
          </span>
          <a href="/rss.xml" class="rss-link" title="RSS Feed">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
              <path d="M6.503 20.752c0 1.794-1.456 3.248-3.251 3.248S0 22.546 0 20.752s1.456-3.248 3.252-3.248 3.251 1.454 3.251 3.248zM1.677 6.082v4.15c6.988 0 12.824 5.835 12.824 12.823h4.187C18.688 15.27 11.731 8.313 4.228 8.313c-.916 0-1.823.078-2.551.769zM.014 0v4.137c13.486 0 24.313 10.897 24.313 24.313H20.14C20.14 15.17 12.845 7.875 4.564 7.875A4.564 4.564 0 0 1 .014 4.137V0z"/>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </header>

  <!-- Search Bar -->
  <div class="search-section">
    <div class="container">
      <div class="search-container">
        <input type="search" class="search-box" placeholder="Search articles..." id="searchInput" />
      </div>
    </div>
  </div>

  <div class="container">
    <!-- Content Grid -->
    <div class="content-grid">
      <!-- Sidebar -->
      <aside class="sidebar">
        <ul class="source-list">
          {Object.entries(sourcesByCategory).map(([category, sources]) => (
            <li class="source-category">
              <div class="category-header">{categoryLabels[category as keyof typeof categoryLabels]}</div>
              <ul>
                {sources.slice(0, 8).map(source => (
                  <li class="source-item">
                    <a href="#" class="source-link" data-source={source.id}>
                      {source.name}
                      <span class="source-count">{source.count}</span>
                    </a>
                  </li>
                ))}
              </ul>
            </li>
          ))}
        </ul>
      </aside>

      <!-- Main Feed -->
      <main class="feed">
        <div class="feed-header">
          <h1 class="feed-title">All Sources</h1>
          <div class="feed-meta">Showing {displayedLinks.length} latest of {allLinks.length} articles</div>
        </div>

        <div class="articles" id="linkStream">
          {displayedLinks.length > 0 ? (
            displayedLinks.map((link) => (
              <article class="article" data-category={link.category} data-source={link.sourceId} data-full-content={link.fullContent || ''}>
                <div class="article-header">
                  <span class="source-badge">{link.sourceName}</span>
                  <span class="article-time">{formatDistanceToNow(new Date(link.publishedAt))}</span>
                </div>
                <h2 class="article-title">
                  <a href={link.url} target="_blank" rel="noopener">{link.title}</a>
                </h2>
                {link.summary && link.summary.trim() && (
                  <p class="article-excerpt">
                    {link.summary.length > 150 
                      ? link.summary.substring(0, 150).trim() + '...' 
                      : link.summary}
                  </p>
                )}
                {link.tags.length > 0 && (
                  <div class="article-tags">
                    {link.tags.map(tag => (
                      <span class="tag">{tag}</span>
                    ))}
                  </div>
                )}
              </article>
            ))
          ) : (
            <div class="py-12 text-center text-text-subtle">
              <p>No articles available</p>
            </div>
          )}
        </div>
        
        <!-- Pagination -->
        {totalPages > 1 && (
          <div class="pagination">
            <div class="pagination-info">
              Showing {showingStart}-{showingEnd} of {allLinks.length} articles
            </div>
            <div class="pagination-controls">
              {hasPrevPage && (
                <a href={`/?page=${currentPage - 1}`} class="pagination-btn pagination-prev">
                  ‚Üê Previous
                </a>
              )}
              <span class="pagination-current">
                Page {currentPage} of {totalPages}
              </span>
              {hasNextPage && (
                <a href={`/?page=${currentPage + 1}`} class="pagination-btn pagination-next">
                  Next ‚Üí
                </a>
              )}
            </div>
          </div>
        )}
      </main>
    </div>
  </div>

  <style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        line-height: 1.6;
        color: #2a2a2a;
        background: #fafbfc;
    }

    .container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 20px;
    }

    /* Header */
    .header {
        border-bottom: 1px solid #e8ebed;
        position: sticky;
        top: 0;
        background: rgba(250, 251, 252, 0.95);
        backdrop-filter: blur(10px);
        z-index: 100;
    }
    
    .header .container {
        padding-top: 20px;
        padding-bottom: 20px;
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .logo {
        font-size: 18px;
        font-weight: 600;
    }

    .logo-link {
        color: #2a2a2a;
        text-decoration: none;
    }

    .logo-link:hover {
        color: #1e40af;
    }

    .header-nav {
        display: flex;
        gap: 2px;
        align-items: center;
        background: #f8fafc;
        border-radius: 6px;
        padding: 2px;
    }

    .nav-link {
        padding: 8px 12px;
        color: #6b7280;
        text-decoration: none;
        border-radius: 4px;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.15s ease;
        display: flex;
        align-items: center;
        gap: 6px;
        white-space: nowrap;
    }

    .nav-link:hover {
        background: #ffffff;
        color: #2a2a2a;
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    }

    .nav-link.active {
        background: #ffffff;
        color: #2a2a2a;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .nav-link.secondary {
        margin-left: 12px;
        background: transparent;
        border: 1px solid #e5e7eb;
        border-radius: 4px;
    }

    .nav-link.secondary:hover {
        border-color: #d1d5db;
        background: #f9fafb;
    }

    .nav-count {
        font-size: 12px;
        color: #9ca3af;
        background: #f3f4f6;
        padding: 2px 6px;
        border-radius: 10px;
        min-width: 20px;
        text-align: center;
        font-weight: 400;
    }

    .nav-link.active .nav-count {
        background: #e0f2fe;
        color: #0369a1;
    }

    .header-meta {
        font-size: 13px;
        color: #6b7280;
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .rss-link {
        color: #9ca3af;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        padding: 2px;
        border-radius: 3px;
        transition: all 0.2s ease;
        opacity: 0.7;
    }
    
    .rss-link:hover {
        color: #f97316;
        opacity: 1;
    }
    
    .meta-text {
        color: #6b7280;
    }

    /* Search Section */
    .search-section {
        border-bottom: 1px solid #e8ebed;
        background: rgba(255, 255, 255, 0.98);
        position: sticky;
        top: 0px;
        z-index: 85;
        backdrop-filter: blur(10px);
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        margin-top: 0;
    }
    
    .search-section .container {
        padding-top: 16px;
        padding-bottom: 16px;
        max-width: 1400px;
        width: 100%;
        margin: 0 auto;
    }

    .search-container {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .search-box {
        padding: 8px 12px;
        border: 1px solid #e8ebed;
        border-radius: 4px;
        font-size: 14px;
        width: 240px;
        background: #ffffff;
    }

    .search-box:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.05);
    }


    /* Content Grid */
    .content-grid {
        display: grid;
        grid-template-columns: 250px 1fr;
        gap: 40px;
        padding: 32px 0;
    }

    /* Sidebar */
    .sidebar {
        position: sticky;
        top: 130px;
        height: fit-content;
        max-height: calc(100vh - 150px);
        overflow-y: auto;
        background: #ffffff;
        border-radius: 8px;
        padding: 20px;
        border: 1px solid #e8ebed;
        scrollbar-width: thin;
        scrollbar-color: #d1d5db #f9fafb;
    }

    .sidebar::-webkit-scrollbar {
        width: 6px;
    }

    .sidebar::-webkit-scrollbar-track {
        background: #f9fafb;
        border-radius: 3px;
    }

    .sidebar::-webkit-scrollbar-thumb {
        background: #d1d5db;
        border-radius: 3px;
    }

    .sidebar::-webkit-scrollbar-thumb:hover {
        background: #9ca3af;
    }

    .source-list {
        list-style: none;
    }

    .source-category {
        margin-bottom: 24px;
    }

    .category-header {
        font-size: 12px;
        font-weight: 600;
        color: #9ca3af;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 8px;
        padding-bottom: 4px;
        border-bottom: 1px solid #f3f4f6;
    }

    .source-item {
        padding: 4px 0;
    }

    .source-link {
        color: #6b7280;
        text-decoration: none;
        font-size: 14px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 4px 8px;
        border-radius: 4px;
        transition: all 0.15s ease;
    }

    .source-link:hover {
        color: #2a2a2a;
        background: #f8fafc;
    }

    .source-count {
        font-size: 12px;
        color: #9ca3af;
        background: #f3f4f6;
        padding: 2px 6px;
        border-radius: 10px;
        min-width: 20px;
        text-align: center;
    }

    /* Feed */
    .feed {
        min-height: 100vh;
    }

    .feed-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
    }

    .feed-title {
        font-size: 16px;
        font-weight: 600;
        color: #2a2a2a;
    }

    .feed-meta {
        font-size: 13px;
        color: #6b7280;
    }

    /* Articles */
    .article {
        padding: 20px 0;
        border-bottom: 1px solid #f1f3f4;
    }

    .article:last-child {
        border-bottom: none;
    }

    .article-header {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 12px;
    }

    .source-badge {
        padding: 3px 8px;
        background: #f0f9ff;
        color: #0369a1;
        font-size: 11px;
        font-weight: 500;
        border-radius: 4px;
        border: 1px solid #e0f2fe;
    }

    .article-time {
        font-size: 12px;
        color: #9ca3af;
    }

    .article-title {
        font-size: 16px;
        font-weight: 500;
        line-height: 1.4;
        margin-bottom: 8px;
    }

    .article-title a {
        color: #2a2a2a;
        text-decoration: none;
    }

    .article-title a:hover {
        color: #1e40af;
        text-decoration: underline;
    }

    .article-excerpt {
        font-size: 14px;
        color: #6b7280;
        line-height: 1.5;
        margin-bottom: 8px;
        display: -webkit-box;
        -webkit-line-clamp: 5;
        -webkit-box-orient: vertical;
        overflow: hidden;
        max-height: 7.5em; /* 5 lines * 1.5 line-height */
    }

    .article-tags {
        display: flex;
        gap: 6px;
        flex-wrap: wrap;
    }

    .tag {
        padding: 2px 8px;
        background: #f8fafc;
        color: #64748b;
        font-size: 11px;
        border-radius: 3px;
        border: 1px solid #e2e8f0;
    }

    /* Pagination */
    .pagination {
        margin: 40px 0;
        padding: 20px 0;
        border-top: 1px solid #e5e7eb;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 16px;
    }

    .pagination-info {
        color: #6b7280;
        font-size: 14px;
    }

    .pagination-controls {
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .pagination-btn {
        padding: 8px 16px;
        background: #3b82f6;
        color: white;
        text-decoration: none;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        transition: background-color 0.2s;
    }

    .pagination-btn:hover {
        background: #2563eb;
    }

    .pagination-current {
        color: #374151;
        font-size: 14px;
        font-weight: 500;
        padding: 8px 16px;
        background: #f3f4f6;
        border-radius: 6px;
    }

    /* Responsive */
    @media (max-width: 1024px) {
        .header-nav {
            overflow-x: auto;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }
        
        .header-nav::-webkit-scrollbar {
            display: none;
        }
        
        .nav-link {
            padding: 6px 10px;
            font-size: 13px;
        }
        
        .nav-count {
            font-size: 11px;
            padding: 1px 4px;
        }
    }

    @media (max-width: 768px) {
        .header-content {
            flex-direction: column;
            gap: 16px;
            align-items: flex-start;
        }
        
        .header-nav {
            width: 100%;
            justify-content: flex-start;
            padding: 4px;
        }
        
        .nav-link {
            padding: 6px 8px;
            font-size: 12px;
        }
        
        .nav-count {
            font-size: 10px;
            padding: 1px 4px;
        }
        
        .header-meta {
            align-self: flex-end;
            font-size: 12px;
        }
        
        .search-section {
            top: 120px; /* Adjust for mobile header height */
        }
        
        .content-grid {
            grid-template-columns: 1fr;
            gap: 24px;
        }

        .sidebar {
            position: static;
            order: 2;
            max-height: none;
            overflow-y: visible;
        }
        
        .pagination {
            flex-direction: column;
            text-align: center;
            gap: 12px;
        }
        
        .pagination-controls {
            justify-content: center;
            gap: 12px;
        }
        
        .pagination-btn {
            padding: 6px 12px;
            font-size: 13px;
        }
        
        .pagination-current {
            padding: 6px 12px;
            font-size: 13px;
        }
    }
  </style>

  <script>
    // Defer script execution until page is fully loaded for better performance
    document.addEventListener('DOMContentLoaded', function() {
    // Filter functionality
    const navLinks = document.querySelectorAll('.nav-link[data-filter]');
    const articles = document.querySelectorAll('.article');
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const feedTitle = document.querySelector('.feed-title');
    const feedMeta = document.querySelector('.feed-meta');
    
    let currentFilter = 'all';
    let searchTerm = '';

    function updateActiveStates() {
      // Update nav links
      navLinks.forEach((link) => {
        if (link.getAttribute('data-filter') === currentFilter) {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });
    }

    function applyFilters() {
      let visibleCount = 0;
      
      articles.forEach((article) => {
        const category = article.getAttribute('data-category');
        
        // Simple category matching
        const matchesCategory = currentFilter === 'all' || category === currentFilter;
        
        let matchesSearch = true;
        if (searchTerm) {
          // Search across title, summary, and full content for better matching
          const title = article.querySelector('.article-title')?.textContent?.toLowerCase() || '';
          const summary = article.querySelector('.article-excerpt')?.textContent?.toLowerCase() || '';
          const fullContent = article.getAttribute('data-full-content')?.toLowerCase() || '';
          const searchText = `${title} ${summary} ${fullContent}`;
          matchesSearch = searchText.includes(searchTerm.toLowerCase());
        }
        
        const isVisible = matchesCategory && matchesSearch;
        (article as HTMLElement).style.display = isVisible ? 'block' : 'none';
        
        if (isVisible) visibleCount++;
      });
      
      // Update feed meta
      if (feedMeta) {
        feedMeta.textContent = `${visibleCount} articles`;
      }
      
      // Update feed title
      if (feedTitle && currentFilter !== 'all') {
        const categoryNames: Record<string, string> = {
          'markets': 'Markets',
          'research': 'Research',
          'macro': 'Economics',
          'policy': 'Policy',
          'technology': 'Technology',
          'non-money': 'General',
          'blogs': 'Blogs'
        };
        feedTitle.textContent = categoryNames[currentFilter] || 'All Sources';
      } else if (feedTitle) {
        feedTitle.textContent = 'All Sources';
      }
      
      updateActiveStates();
    }

    // Set initial active state
    updateActiveStates();

    // Navigation link clicks
    navLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        currentFilter = link.getAttribute('data-filter') || 'all';
        applyFilters();
      });
    });

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        searchTerm = (e.target as HTMLInputElement).value;
        applyFilters();
      });
    }

    // Source filter clicks
    document.querySelectorAll('.source-link').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const sourceId = link.getAttribute('data-source');
        
        articles.forEach(article => {
          const articleSource = article.getAttribute('data-source');
          (article as HTMLElement).style.display = 
            articleSource === sourceId ? 'block' : 'none';
        });
        
        // Update feed title
        if (feedTitle) {
          feedTitle.textContent = link.textContent?.split(/\d+/)[0].trim() || 'Source';
        }
        
        // Count visible articles
        const visibleCount = Array.from(articles).filter(
          article => article.getAttribute('data-source') === sourceId
        ).length;
        
        if (feedMeta) {
          feedMeta.textContent = `${visibleCount} articles`;
        }
      });
    });

    // View toggle

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Focus search on '/' key
      if (e.key === '/' && document.activeElement !== searchInput) {
        e.preventDefault();
        searchInput?.focus();
      }
      
      // Clear search on Escape
      if (e.key === 'Escape' && searchInput) {
        searchInput.value = '';
        searchTerm = '';
        searchInput.blur();
        applyFilters();
      }
    });
    }); // End DOMContentLoaded
  </script>
</Layout>