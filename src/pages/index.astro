---
import Layout from '../layouts/Layout.astro';
import ThemeToggle from '../components/ThemeToggle.astro';
import Navigation from '../components/Navigation.astro';
import LinkCard from '../components/LinkCard.astro';
import type { FeedItem } from '../types';
// import { formatDate } from '../utils/date';
import '../styles/global.css';

// Load all link data
const linkFiles = await Astro.glob('../content/links/*.json');
const allLinks: FeedItem[] = [];

for (const file of linkFiles) {
  if (Array.isArray(file.default)) {
    allLinks.push(...file.default);
  }
}

// Sort by published date
allLinks.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());

// Get today's date for highlighting (used in client-side script)
// const today = formatDate(new Date());
// const yesterday = formatDate(new Date(Date.now() - 86400000));
---

<Layout title="Finance Links">
  <div class="container max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-6 lg:py-12">
    <header class="mb-8">
      <!-- Title -->
      <div class="mb-6 text-center relative">
        <div class="flex items-center justify-center gap-3 mb-2">
          <h1 class="text-3xl font-bold text-foreground">
            Markets Feeds
          </h1>
          <ThemeToggle />
        </div>
        <p class="text-text-light">
          Financial news aggregation from trusted sources
        </p>
      </div>
      
      <!-- Search -->
      <div class="mb-6">
        <div class="relative max-w-md mx-auto">
          <input
            type="text"
            id="searchInput"
            placeholder="Search articles, sources, topics..."
            class="w-full pl-10 pr-4 py-2 text-sm border border-border rounded-md focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary transition-colors"
          />
          <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-text-subtle" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
          </svg>
        </div>
      </div>
      
      <Navigation currentPage="all" />
      
      <!-- Category Filters -->
      <div class="flex flex-wrap justify-center gap-2 mb-6">
        <button class="filter-btn active" data-filter="all">
          All
        </button>
        <button class="filter-btn" data-filter="markets">
          Markets
        </button>
        <button class="filter-btn" data-filter="macro">
          Macro
        </button>
        <button class="filter-btn" data-filter="research">
          Research
        </button>
        <button class="filter-btn" data-filter="technology">
          Technology
        </button>
        <button class="filter-btn" data-filter="policy">
          Policy
        </button>
        <button class="filter-btn" data-filter="filings">
          Filings
        </button>
      </div>
      
      <!-- Sources Link -->
      <div class="text-center">
        <a 
          href="/sources" 
          class="text-sm text-text-subtle hover:text-text transition-colors"
        >
          View all sources â†’
        </a>
      </div>
    </header>
    
    <!-- Content Grid -->
    <main id="linkStream">
      {allLinks.length > 0 ? (
        <div>
          {allLinks.map((link) => (
            <LinkCard link={link} />
          ))}
        </div>
      ) : (
        <div class="py-12 text-center text-text-subtle">
          <p>No articles available</p>
        </div>
      )}
    </main>
    
    <!-- Empty State for Filtered Results -->
    <div id="emptyState" class="hidden py-12 text-center text-text-subtle">
      <p>No results found</p>
    </div>
  </div>
  
  <style>
    .filter-btn {
      @apply px-3 py-1.5 text-sm text-text-subtle hover:text-text transition-colors rounded-md hover:bg-accent;
    }
    .filter-btn.active {
      @apply text-text bg-accent;
    }
  </style>
  
  <script>
    // Filter functionality
    const filterBtns = document.querySelectorAll('.filter-btn');
    const linkItems = document.querySelectorAll('.link-item');
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const emptyState = document.getElementById('emptyState');
    const linkStream = document.getElementById('linkStream');
    
    let currentFilter = 'all';
    let searchTerm = '';
    
    function applyFilters() {
      let visibleCount = 0;
      
      linkItems.forEach((item) => {
        const category = item.getAttribute('data-category');
        const matchesCategory = currentFilter === 'all' || category === currentFilter;
        
        let matchesSearch = true;
        if (searchTerm) {
          const text = item.textContent?.toLowerCase() || '';
          matchesSearch = text.includes(searchTerm.toLowerCase());
        }
        
        const isVisible = matchesCategory && matchesSearch;
        (item as HTMLElement).style.display = isVisible ? 'block' : 'none';
        
        if (isVisible) visibleCount++;
      });
      
      // Show/hide empty state
      if (emptyState && linkStream) {
        if (visibleCount === 0 && (searchTerm || currentFilter !== 'all')) {
          emptyState.classList.remove('hidden');
          linkStream.classList.add('hidden');
        } else {
          emptyState.classList.add('hidden');
          linkStream.classList.remove('hidden');
        }
      }
    }
    
    // Filter button clicks
    filterBtns.forEach((btn) => {
      btn.addEventListener('click', () => {
        filterBtns.forEach((b) => b.classList.remove('active'));
        btn.classList.add('active');
        currentFilter = btn.getAttribute('data-filter') || 'all';
        applyFilters();
      });
    });
    
    // Search functionality - redirect to search page
    if (searchInput) {
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          const query = searchInput.value.trim();
          if (query) {
            window.location.href = `/search?q=${encodeURIComponent(query)}`;
          } else {
            window.location.href = '/search';
          }
        }
      });
      
      // Also handle input for live filtering (keep existing functionality)
      searchInput.addEventListener('input', (e) => {
        searchTerm = (e.target as HTMLInputElement).value;
        applyFilters();
      });
    }
    
    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      // Focus search on '/' key
      if (e.key === '/' && document.activeElement !== searchInput) {
        e.preventDefault();
        searchInput?.focus();
      }
      
      // Clear search on Escape
      if (e.key === 'Escape' && searchInput) {
        searchInput.value = '';
        searchTerm = '';
        searchInput.blur();
        applyFilters();
      }
    });
    
    // Mark breaking news items with special styling
    linkItems.forEach((item) => {
      const priority = item.getAttribute('data-priority');
      if (priority === 'breaking') {
        item.classList.add('border-red-600/20');
      }
    });
    
    // Global function for tag filtering
    (window as any).filterByTag = function(tag: string) {
      searchInput.value = tag.toLowerCase();
      searchTerm = tag.toLowerCase();
      applyFilters();
      searchInput.focus();
    };

    // Clear filters function
    (window as any).clearFilters = function() {
      // Reset search
      searchInput.value = '';
      searchTerm = '';
      
      // Reset category filter
      filterBtns.forEach(btn => btn.classList.remove('active'));
      document.querySelector('[data-filter="all"]')?.classList.add('active');
      currentFilter = 'all';
      
      // Apply filters
      applyFilters();
    };
  </script>
</Layout>