---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import CategoryHeader from '../components/CategoryHeader.astro';
import LinkCard from '../components/LinkCard.astro';
import type { FeedItem } from '../types';
import '../styles/global.css';

// Load all link data for searching
const linkFiles = await Astro.glob('../content/links/*.json');
const allLinks: FeedItem[] = [];

for (const file of linkFiles) {
  if (Array.isArray(file.default)) {
    allLinks.push(...file.default);
  }
}

// Sort by published date
allLinks.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());

// Get search query from URL
const url = new URL(Astro.request.url);
const query = url.searchParams.get('q') || '';
---

<Layout title={`Search${query ? ` - ${query}` : ''} - Markets Feeds`} description="Search financial news and articles">
  <div class="container max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 lg:py-12 overflow-x-hidden">
    <CategoryHeader title="Search" currentPage="search">
      <div slot="filters" class="mb-6">
        <!-- Enhanced Search Input -->
        <div class="relative max-w-2xl mx-auto mb-6">
          <input
            type="text"
            id="searchInput"
            placeholder="Search articles, sources, topics..."
            value={query}
            class="w-full pl-10 pr-12 py-3 text-base border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary transition-colors"
          />
          <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-text-subtle" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
          </svg>
          <button
            id="clearSearch" 
            class="absolute right-3 top-1/2 transform -translate-y-1/2 text-text-subtle hover:text-text transition-colors"
            title="Clear search"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
        
        <!-- Search Filters -->
        <div class="flex flex-wrap justify-center gap-2 mb-4">
          <button class="filter-btn active" data-filter="all">All</button>
          <button class="filter-btn" data-filter="markets">Markets</button>
          <button class="filter-btn" data-filter="macro">Macro</button>
          <button class="filter-btn" data-filter="research">Research</button>
          <button class="filter-btn" data-filter="technology">Technology</button>
          <button class="filter-btn" data-filter="policy">Policy</button>
          <button class="filter-btn" data-filter="newsletters">Newsletters</button>
        </div>
        
        <!-- Search Stats -->
        <div id="searchStats" class="text-center text-sm text-text-subtle mb-4">
          {query && `Searching for "${query}"`}
        </div>
      </div>
    </CategoryHeader>
    
    <Navigation currentPage="search" />
    
    <!-- Search Results -->
    <main id="searchResults">
      <div id="resultsContainer">
        <!-- Results will be populated by JavaScript -->
      </div>
      
      <!-- No Results State -->
      <div id="noResults" class="hidden py-12 text-center">
        <div class="w-16 h-16 mx-auto mb-4 text-text-subtle">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-foreground mb-2">No results found</h3>
        <p class="text-text-subtle mb-4">Try adjusting your search terms or filters</p>
        <button onclick="clearAllFilters()" class="text-primary hover:text-primary/80 transition-colors">
          Clear all filters
        </button>
      </div>
      
      <!-- Loading State -->
      <div id="loadingState" class="py-12 text-center">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
        <p class="mt-4 text-text-subtle">Searching...</p>
      </div>
    </main>
  </div>
  
  <style>
    .filter-btn {
      @apply px-3 py-1.5 text-sm text-text-subtle hover:text-text transition-colors rounded-md hover:bg-accent;
    }
    .filter-btn.active {
      @apply text-text bg-accent;
    }
    .highlight {
      @apply bg-yellow-200 dark:bg-yellow-900/50 px-1 rounded;
    }
  </style>
  
  <script define:vars={{ allLinks, initialQuery: query }}>
    // Search functionality
    let currentResults = [];
    let currentFilter = 'all';
    let searchTerm = initialQuery || '';
    
    const searchInput = document.getElementById('searchInput');
    const clearButton = document.getElementById('clearSearch');
    const filterBtns = document.querySelectorAll('.filter-btn');
    const resultsContainer = document.getElementById('resultsContainer');
    const noResults = document.getElementById('noResults');
    const loadingState = document.getElementById('loadingState');
    const searchStats = document.getElementById('searchStats');
    
    // Initialize search
    if (searchTerm) {
      performSearch();
    } else {
      showRecentArticles();
    }
    
    // Search input events
    searchInput.addEventListener('input', debounce(performSearch, 300));
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        performSearch();
        updateURL();
      }
    });
    
    // Clear search
    clearButton.addEventListener('click', () => {
      searchInput.value = '';
      searchTerm = '';
      performSearch();
      updateURL();
      searchInput.focus();
    });
    
    // Filter buttons
    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        filterBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        currentFilter = btn.getAttribute('data-filter') || 'all';
        performSearch();
      });
    });
    
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
    
    function performSearch() {
      searchTerm = searchInput.value.toLowerCase().trim();
      
      if (!searchTerm) {
        showRecentArticles();
        return;
      }
      
      showLoading();
      
      // Simulate search delay for better UX
      setTimeout(() => {
        const results = allLinks.filter(article => {
          // Category filter
          const matchesCategory = currentFilter === 'all' || article.category === currentFilter;
          if (!matchesCategory) return false;
          
          // Text search
          const searchableText = [
            article.title,
            article.summary || '',
            article.sourceName,
            article.tags.join(' ')
          ].join(' ').toLowerCase();
          
          return searchableText.includes(searchTerm);
        });
        
        currentResults = results;
        displayResults(results);
        updateSearchStats(results.length);
      }, 200);
    }
    
    function showRecentArticles() {
      const recentArticles = allLinks.slice(0, 20);
      currentResults = recentArticles;
      displayResults(recentArticles);
      updateSearchStats(null, 'recent');
    }
    
    function displayResults(results) {
      hideLoading();
      
      if (results.length === 0) {
        showNoResults();
        return;
      }
      
      hideNoResults();
      
      resultsContainer.innerHTML = results.map(article => 
        createArticleHTML(article)
      ).join('');
    }
    
    function createArticleHTML(article) {
      const timeAgo = formatDistanceToNow(new Date(article.publishedAt));
      const highlightedTitle = highlightSearchTerm(article.title, searchTerm);
      const highlightedSummary = article.summary ? 
        highlightSearchTerm(article.summary, searchTerm) : '';
      
      return `
        <article class="link-item py-6 border-b border-border last:border-b-0" 
                 data-category="${article.category}" 
                 data-source="${article.sourceId}" 
                 data-priority="${article.priority}"
                 data-tags="${article.tags.join(',')}">
          <div class="flex items-center gap-3 text-xs mb-2">
            <span class="font-medium text-primary">${article.sourceName}</span>
            <span class="text-text-subtle">·</span>
            <time datetime="${article.publishedAt}" class="text-text-subtle">
              ${timeAgo}
            </time>
            ${article.priority === 'breaking' ? 
              '<span class="text-text-subtle">·</span><span class="text-red-600 font-semibold uppercase tracking-wide">Breaking</span>' : 
              ''
            }
          </div>
          
          <h2 class="mb-2">
            <a href="${article.url}" 
               target="_blank" 
               rel="noopener noreferrer" 
               class="text-lg font-medium leading-tight text-foreground hover:text-primary transition-colors">
              ${highlightedTitle}
            </a>
          </h2>
          
          ${highlightedSummary ? `
            <p class="text-sm text-text-light leading-relaxed line-clamp-2 mb-3">
              ${highlightedSummary}
            </p>
          ` : ''}
          
          ${article.tags.length > 0 ? `
            <div class="flex flex-wrap gap-2">
              ${article.tags.map(tag => `
                <button class="text-xs text-text-subtle hover:text-primary transition-colors"
                        onclick="searchForTag('${tag}')">
                  #${tag.toLowerCase()}
                </button>
              `).join('')}
            </div>
          ` : ''}
        </article>
      `;
    }
    
    function highlightSearchTerm(text, term) {
      if (!term || !text) return text;
      
      const regex = new RegExp(`(${term})`, 'gi');
      return text.replace(regex, '<span class="highlight">$1</span>');
    }
    
    function formatDistanceToNow(date) {
      const now = new Date();
      const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
      
      if (diffInSeconds < 60) return 'now';
      if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
      if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
      return `${Math.floor(diffInSeconds / 86400)}d ago`;
    }
    
    function updateSearchStats(count, type = 'search') {
      if (type === 'recent') {
        searchStats.textContent = 'Showing recent articles';
      } else if (searchTerm) {
        searchStats.textContent = `Found ${count} result${count !== 1 ? 's' : ''} for "${searchTerm}"`;
      } else {
        searchStats.textContent = '';
      }
    }
    
    function showLoading() {
      loadingState.classList.remove('hidden');
      resultsContainer.classList.add('hidden');
      noResults.classList.add('hidden');
    }
    
    function hideLoading() {
      loadingState.classList.add('hidden');
      resultsContainer.classList.remove('hidden');
    }
    
    function showNoResults() {
      noResults.classList.remove('hidden');
      resultsContainer.classList.add('hidden');
    }
    
    function hideNoResults() {
      noResults.classList.add('hidden');
    }
    
    function updateURL() {
      const url = new URL(window.location);
      if (searchTerm) {
        url.searchParams.set('q', searchTerm);
      } else {
        url.searchParams.delete('q');
      }
      window.history.replaceState({}, '', url);
    }
    
    // Global functions
    window.searchForTag = function(tag) {
      searchInput.value = tag.toLowerCase();
      searchTerm = tag.toLowerCase();
      performSearch();
      updateURL();
      searchInput.focus();
    };
    
    window.clearAllFilters = function() {
      searchInput.value = '';
      searchTerm = '';
      filterBtns.forEach(btn => btn.classList.remove('active'));
      document.querySelector('[data-filter="all"]').classList.add('active');
      currentFilter = 'all';
      performSearch();
      updateURL();
    };
    
    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (e.key === '/' && document.activeElement !== searchInput) {
        e.preventDefault();
        searchInput.focus();
      }
      
      if (e.key === 'Escape' && document.activeElement === searchInput) {
        searchInput.blur();
      }
    });
  </script>
</Layout>