---
export const prerender = false;

import { RSS_SOURCES } from '../../config/sources';

// Simple password check
const url = new URL(Astro.request.url);
const password = url.searchParams.get('pass') || Astro.cookies.get('admin_pass')?.value;

if (password !== 'MF2025!SecureTeam#AdminAccess789') {
  return Astro.redirect('/admin/login');
}

// Set cookie for future requests
Astro.cookies.set('admin_pass', password, {
  httpOnly: true,
  maxAge: 60 * 60 * 24, // 24 hours
  path: '/'
});

// Load recent links for stats
const linkFiles = await Astro.glob('../../content/links/*.json');
const allLinks = linkFiles.flatMap(file => Array.isArray(file.default) ? file.default : []);
const todayLinks = allLinks.filter(link => {
  const linkDate = new Date(link.publishedAt).toDateString();
  const today = new Date().toDateString();
  return linkDate === today;
});

// Calculate stats
const totalSources = RSS_SOURCES.length;
const activeSources = RSS_SOURCES.filter(s => s.enabled).length;
const articlesToday = todayLinks.length;
const lastUpdate = allLinks.length > 0 ? new Date(Math.max(...allLinks.map(l => new Date(l.fetchedAt).getTime()))) : new Date();

// Error sources (mock data - in real implementation, read from aggregator state)
const errorSources = RSS_SOURCES.filter(s => Math.random() < 0.05); // Mock 5% error rate
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RSS Admin Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            line-height: 1.6;
            color: #2a2a2a;
            background: #fafbfc;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header */
        .header {
            border-bottom: 1px solid #e8ebed;
            padding: 20px 0;
            background: #ffffff;
            margin-bottom: 32px;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .logo {
            font-size: 18px;
            font-weight: 600;
            color: #2a2a2a;
        }

        .admin-badge {
            padding: 4px 8px;
            background: #f0f9ff;
            color: #0369a1;
            font-size: 11px;
            font-weight: 500;
            border-radius: 4px;
            border: 1px solid #e0f2fe;
        }

        .header-actions {
            display: flex;
            gap: 12px;
            align-items: center;
        }

        .btn {
            padding: 8px 16px;
            border: 1px solid #e8ebed;
            background: #ffffff;
            color: #2a2a2a;
            font-size: 14px;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            transition: all 0.15s ease;
        }

        .btn:hover {
            background: #f8fafc;
        }

        .btn-primary {
            background: #3b82f6;
            color: #ffffff;
            border-color: #3b82f6;
        }

        .btn-primary:hover {
            background: #2563eb;
        }

        .btn-danger {
            background: #ef4444;
            color: #ffffff;
            border-color: #ef4444;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .btn-small {
            padding: 4px 8px;
            font-size: 12px;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: #ffffff;
            border: 1px solid #e8ebed;
            border-radius: 8px;
            padding: 24px;
        }

        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }

        .stat-title {
            font-size: 14px;
            color: #6b7280;
            font-weight: 500;
        }

        .stat-trend {
            font-size: 12px;
            padding: 2px 6px;
            border-radius: 3px;
        }

        .trend-up {
            background: #f0fdf4;
            color: #16a34a;
        }

        .trend-down {
            background: #fef2f2;
            color: #dc2626;
        }

        .stat-value {
            font-size: 32px;
            font-weight: 600;
            color: #2a2a2a;
            margin-bottom: 4px;
        }

        .stat-label {
            font-size: 13px;
            color: #9ca3af;
        }

        /* Main Content */
        .main-content {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 32px;
        }

        .content-section {
            background: #ffffff;
            border: 1px solid #e8ebed;
            border-radius: 8px;
        }

        .section-header {
            padding: 20px 24px;
            border-bottom: 1px solid #f1f3f4;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .section-title {
            font-size: 16px;
            font-weight: 600;
            color: #2a2a2a;
        }

        .section-content {
            padding: 24px;
        }

        /* Feed List */
        .feed-list {
            max-height: 600px;
            overflow-y: auto;
        }

        .feed-item {
            padding: 16px 24px;
            border-bottom: 1px solid #f1f3f4;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 16px;
        }

        .feed-item:last-child {
            border-bottom: none;
        }

        .feed-info {
            flex: 1;
        }

        .feed-name {
            font-size: 14px;
            font-weight: 500;
            color: #2a2a2a;
            margin-bottom: 4px;
        }

        .feed-url {
            font-size: 12px;
            color: #6b7280;
            word-break: break-all;
            margin-bottom: 6px;
        }

        .feed-meta {
            display: flex;
            gap: 12px;
            align-items: center;
        }

        .feed-category {
            padding: 2px 6px;
            background: #f3f4f6;
            color: #6b7280;
            font-size: 11px;
            border-radius: 3px;
            text-transform: capitalize;
        }

        .feed-status {
            padding: 2px 6px;
            font-size: 11px;
            border-radius: 3px;
            font-weight: 500;
        }

        .status-active {
            background: #f0fdf4;
            color: #16a34a;
        }

        .status-error {
            background: #fef2f2;
            color: #dc2626;
        }

        .feed-actions {
            display: flex;
            gap: 6px;
            align-items: center;
        }

        .feed-count {
            font-size: 12px;
            color: #9ca3af;
            background: #f3f4f6;
            padding: 2px 6px;
            border-radius: 10px;
            min-width: 20px;
            text-align: center;
        }

        /* Controls */
        .controls {
            display: flex;
            gap: 12px;
            margin-bottom: 20px;
        }

        .search-box {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #e8ebed;
            border-radius: 4px;
            font-size: 14px;
            background: #ffffff;
        }

        .filter-select {
            padding: 8px 12px;
            border: 1px solid #e8ebed;
            border-radius: 4px;
            font-size: 14px;
            background: #ffffff;
            min-width: 120px;
        }

        /* Quick Actions */
        .action-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
        }

        .action-card {
            display: block;
            padding: 20px;
            border: 1px solid #e8ebed;
            border-radius: 8px;
            text-decoration: none;
            color: #2a2a2a;
            transition: all 0.15s ease;
            background: #ffffff;
        }

        .action-card:hover {
            border-color: #3b82f6;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .action-card h3 {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 8px;
            color: #2a2a2a;
        }

        .action-card p {
            font-size: 13px;
            color: #6b7280;
        }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            animation: fadeIn 0.2s ease;
        }

        .modal-overlay.show {
            display: flex;
        }

        .modal {
            background: #ffffff;
            border-radius: 12px;
            padding: 0;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow: hidden;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
            animation: slideIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from { 
                opacity: 0;
                transform: translateY(-20px) scale(0.95);
            }
            to { 
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .modal-header {
            padding: 24px 24px 0 24px;
            border-bottom: 1px solid #f1f3f4;
            margin-bottom: 0;
            padding-bottom: 16px;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: #2a2a2a;
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            color: #9ca3af;
            cursor: pointer;
            padding: 0;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
            transition: all 0.15s ease;
        }

        .modal-close:hover {
            background: #f3f4f6;
            color: #6b7280;
        }

        .modal-body {
            padding: 24px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            font-size: 14px;
            font-weight: 500;
            color: #374151;
            margin-bottom: 6px;
        }

        .form-input {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            font-size: 14px;
            background: #ffffff;
            transition: all 0.15s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-select {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            font-size: 14px;
            background: #ffffff;
            transition: all 0.15s ease;
        }

        .form-select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-help {
            font-size: 12px;
            color: #6b7280;
            margin-top: 4px;
        }

        .modal-footer {
            padding: 0 24px 24px 24px;
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }

        .btn-cancel {
            background: #f8fafc;
            color: #6b7280;
            border: 1px solid #e5e7eb;
        }

        .btn-cancel:hover {
            background: #f1f5f9;
            color: #374151;
        }

        .form-error {
            background: #fef2f2;
            border: 1px solid #fecaca;
            color: #dc2626;
            padding: 12px;
            border-radius: 6px;
            font-size: 14px;
            margin-bottom: 16px;
            display: none;
        }

        .form-success {
            background: #f0fdf4;
            border: 1px solid #bbf7d0;
            color: #16a34a;
            padding: 12px;
            border-radius: 6px;
            font-size: 14px;
            margin-bottom: 16px;
            display: none;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }

            .stats-grid {
                grid-template-columns: 1fr 1fr;
            }

            .header-content {
                flex-direction: column;
                gap: 16px;
            }

            .controls {
                flex-direction: column;
            }

            .feed-item {
                flex-direction: column;
                gap: 12px;
            }

            .feed-actions {
                align-self: flex-start;
            }

            /* Modal responsive */
            .modal {
                width: 95%;
                margin: 20px;
                max-height: calc(100vh - 40px);
            }

            .modal-header {
                padding: 20px 20px 0 20px;
                padding-bottom: 12px;
            }

            .modal-body {
                padding: 20px;
            }

            .modal-footer {
                padding: 0 20px 20px 20px;
                flex-direction: column-reverse;
                gap: 8px;
            }

            .modal-footer .btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <header class="header">
            <div class="header-content">
                <div class="header-left">
                    <div class="logo">Markets Feeds</div>
                    <span class="admin-badge">Admin Dashboard</span>
                </div>
                <div class="header-actions">
                    <button class="btn" id="refresh-all-btn">↻ Refresh All Feeds</button>
                    <a href="/" class="btn">← Back to Feed</a>
                </div>
            </div>
        </header>

        <!-- Stats Grid -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-header">
                    <span class="stat-title">Total Sources</span>
                    <span class="stat-trend trend-up">+2 this week</span>
                </div>
                <div class="stat-value">{totalSources}</div>
                <div class="stat-label">RSS feeds configured</div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <span class="stat-title">Articles Today</span>
                    <span class="stat-trend trend-up">+18%</span>
                </div>
                <div class="stat-value">{articlesToday}</div>
                <div class="stat-label">New articles fetched</div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <span class="stat-title">Active Sources</span>
                    <span class="stat-trend trend-up">98%</span>
                </div>
                <div class="stat-value">{activeSources}</div>
                <div class="stat-label">Sources working properly</div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <span class="stat-title">Last Update</span>
                </div>
                <div class="stat-value">{Math.floor((Date.now() - lastUpdate.getTime()) / 60000)}m</div>
                <div class="stat-label">ago</div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Feed Management -->
            <div class="content-section">
                <div class="section-header">
                    <h2 class="section-title">RSS Sources</h2>
                    <button class="btn btn-primary" onclick="showAddFeed()">+ Add New Feed</button>
                </div>
                
                <div class="section-content">
                    <div class="controls">
                        <input type="search" class="search-box" placeholder="Search feeds..." id="feed-search">
                        <select class="filter-select" id="category-filter">
                            <option value="">All Categories</option>
                            <option value="markets">Markets</option>
                            <option value="research">Research</option>
                            <option value="macro">Economics</option>
                            <option value="policy">Policy</option>
                            <option value="technology">Technology</option>
                            <option value="non-money">General</option>
                            <option value="blogs">Blogs</option>
                            <option value="videos">Videos</option>
                        </select>
                        <select class="filter-select" id="status-filter">
                            <option value="">All Status</option>
                            <option value="active">Active</option>
                            <option value="error">Error</option>
                        </select>
                    </div>

                    <div class="feed-list" id="feed-list">
                        {RSS_SOURCES.slice(0, 20).map(source => {
                          const hasError = errorSources.includes(source);
                          const count = Math.floor(Math.random() * 50);
                          return (
                            <div class="feed-item" data-category={source.category} data-status={hasError ? 'error' : 'active'} data-feed-id={source.id}>
                              <div class="feed-info">
                                <div class="feed-name">{source.name}</div>
                                <div class="feed-url">{source.url}</div>
                                <div class="feed-meta">
                                  <span class="feed-category">{source.category}</span>
                                  <span class={`feed-status ${hasError ? 'status-error' : 'status-active'}`}>
                                    {hasError ? 'Error' : 'Active'}
                                  </span>
                                </div>
                              </div>
                              <div class="feed-actions">
                                <span class="feed-count">{hasError ? 0 : count}</span>
                                <button class="btn btn-small" onclick={`editFeed('${source.id}')`}>Edit</button>
                                <button class="btn btn-small test-btn" onclick={`testFeed('${source.id}')`}>Test</button>
                                <button class="btn btn-small btn-danger" onclick={`deleteFeed('${source.id}')`}>Delete</button>
                              </div>
                            </div>
                          );
                        })}
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="content-section">
                <div class="section-header">
                    <h2 class="section-title">Quick Actions</h2>
                </div>
                
                <div class="section-content">
                    <div class="action-grid">
                        <button class="action-card" onclick="window.location.href='/discover'">
                            <h3>Discovery Feed</h3>
                            <p>Manage curated insights and posts</p>
                        </button>
                        <button class="action-card" onclick="refreshAllFeeds()">
                            <h3>Refresh All</h3>
                            <p>Update all RSS feeds now</p>
                        </button>
                        <button class="action-card" onclick="clearCache()">
                            <h3>Clear Cache</h3>
                            <p>Clear all browser and service worker caches</p>
                        </button>
                        <button class="action-card" onclick="exportFeeds()">
                            <h3>Export Data</h3>
                            <p>Download feed configuration</p>
                        </button>
                        <button class="action-card" onclick="viewLogs()">
                            <h3>View Logs</h3>
                            <p>Check aggregation logs</p>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Feed Modal -->
    <div class="modal-overlay" id="add-feed-modal">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title">
                    Add New RSS Feed
                    <button class="modal-close" onclick="hideAddFeedModal()">&times;</button>
                </h3>
            </div>
            <div class="modal-body">
                <div class="form-error" id="form-error"></div>
                <div class="form-success" id="form-success"></div>
                
                <form id="add-feed-form">
                    <div class="form-group">
                        <label class="form-label" for="feed-name">Feed Name *</label>
                        <input type="text" id="feed-name" class="form-input" placeholder="e.g., Reuters Business" required>
                        <div class="form-help">A descriptive name for the RSS feed</div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="feed-url">RSS URL *</label>
                        <input type="url" id="feed-url" class="form-input" placeholder="https://example.com/rss.xml" required>
                        <div class="form-help">The complete RSS feed URL</div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="feed-category">Category *</label>
                        <select id="feed-category" class="form-select" required>
                            <option value="">Select a category</option>
                            <option value="markets">Markets</option>
                            <option value="research">Research</option>
                            <option value="macro">Economics</option>
                            <option value="policy">Policy</option>
                            <option value="technology">Technology</option>
                            <option value="non-money">General</option>
                            <option value="blogs">Blogs</option>
                            <option value="videos">Videos</option>
                        </select>
                        <div class="form-help">Choose the most appropriate category</div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="feed-priority">Priority</label>
                        <select id="feed-priority" class="form-select">
                            <option value="1">High (1)</option>
                            <option value="2" selected>Medium (2)</option>
                            <option value="3">Low (3)</option>
                        </select>
                        <div class="form-help">Higher priority feeds are processed first</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-cancel" onclick="hideAddFeedModal()">Cancel</button>
                <button type="button" class="btn btn-primary" id="add-feed-submit" onclick="submitAddFeed()">Add Feed</button>
            </div>
        </div>
    </div>

    <script define:vars={{ RSS_SOURCES }}>
        // Development mode authentication fallback
        if (!window.location.search.includes('pass=') && sessionStorage.getItem('admin_auth')) {
            const auth = sessionStorage.getItem('admin_auth');
            if (auth === 'MF2025!SecureTeam#AdminAccess789') {
                // Add password to URL for Astro to read
                const url = new URL(window.location.href);
                url.searchParams.set('pass', auth);
                window.history.replaceState({}, '', url);
                // Reload to let Astro process the password
                window.location.reload();
            }
        }

        // Search and filter functionality
        document.getElementById('feed-search')?.addEventListener('input', (e) => {
            const target = e.target;
            const searchTerm = target?.value.toLowerCase() || '';
            const feedItems = document.querySelectorAll('.feed-item');
            
            feedItems.forEach(item => {
                const itemEl = item;
                const name = item.querySelector('.feed-name')?.textContent?.toLowerCase() || '';
                const url = item.querySelector('.feed-url')?.textContent?.toLowerCase() || '';
                
                if (name.includes(searchTerm) || url.includes(searchTerm)) {
                    itemEl.style.display = 'flex';
                } else {
                    itemEl.style.display = 'none';
                }
            });
        });

        document.getElementById('category-filter')?.addEventListener('change', (e) => {
            const target = e.target;
            const category = target?.value || '';
            const feedItems = document.querySelectorAll('.feed-item');
            
            feedItems.forEach(item => {
                const itemEl = item;
                const itemCategory = item.getAttribute('data-category');
                
                if (!category || itemCategory === category) {
                    itemEl.style.display = 'flex';
                } else {
                    itemEl.style.display = 'none';
                }
            });
        });

        document.getElementById('status-filter')?.addEventListener('change', (e) => {
            const target = e.target;
            const status = target?.value || '';
            const feedItems = document.querySelectorAll('.feed-item');
            
            feedItems.forEach(item => {
                const itemEl = item;
                const itemStatus = item.getAttribute('data-status');
                
                if (!status || itemStatus === status) {
                    itemEl.style.display = 'flex';
                } else {
                    itemEl.style.display = 'none';
                }
            });
        });

        // Quick actions
        window.refreshAllFeeds = function() {
            const btn = document.getElementById('refresh-all-btn');
            if (!btn) return;
            btn.textContent = '↻ Refreshing...';
            btn.disabled = true;
            
            // Use the local API to refresh feeds
            fetch('/admin/api/feeds', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ action: 'refresh' })
            }).then(response => response.json())
            .then(result => {
                if (btn) {
                    if (result.success) {
                        btn.textContent = '✓ Refreshed';
                        setTimeout(() => {
                            btn.textContent = '↻ Refresh All Feeds';
                            btn.disabled = false;
                            // Reload page to show updated stats
                            window.location.reload();
                        }, 2000);
                    } else {
                        btn.textContent = '✗ Error';
                        console.error('Refresh error:', result.error);
                        alert('Refresh failed: ' + result.error);
                        setTimeout(() => {
                            btn.textContent = '↻ Refresh All Feeds';
                            btn.disabled = false;
                        }, 2000);
                    }
                }
            }).catch(error => {
                if (btn) {
                    btn.textContent = '✗ Error';
                    console.error('Network error:', error);
                    alert('Network error: ' + error.message);
                    setTimeout(() => {
                        btn.textContent = '↻ Refresh All Feeds';
                        btn.disabled = false;
                    }, 2000);
                }
            });
        }

        // Modal management functions
        window.showAddFeed = function() {
            const modal = document.getElementById('add-feed-modal');
            const form = document.getElementById('add-feed-form');
            const errorDiv = document.getElementById('form-error');
            const successDiv = document.getElementById('form-success');
            
            // Reset form and hide messages
            form.reset();
            errorDiv.style.display = 'none';
            successDiv.style.display = 'none';
            
            modal.classList.add('show');
            
            // Focus first input
            setTimeout(() => {
                document.getElementById('feed-name').focus();
            }, 100);
        }

        window.hideAddFeedModal = function() {
            const modal = document.getElementById('add-feed-modal');
            modal.classList.remove('show');
        }

        window.submitAddFeed = function() {
            const form = document.getElementById('add-feed-form');
            const submitBtn = document.getElementById('add-feed-submit');
            const errorDiv = document.getElementById('form-error');
            const successDiv = document.getElementById('form-success');
            
            // Hide previous messages
            errorDiv.style.display = 'none';
            successDiv.style.display = 'none';
            
            // Get form data
            const name = document.getElementById('feed-name').value.trim();
            const url = document.getElementById('feed-url').value.trim();
            const category = document.getElementById('feed-category').value;
            const priority = parseInt(document.getElementById('feed-priority').value);
            
            // Basic validation
            if (!name || !url || !category) {
                showFormError('Please fill in all required fields');
                return;
            }
            
            // URL validation
            try {
                new URL(url);
            } catch (e) {
                showFormError('Please enter a valid URL');
                return;
            }
            
            // Update button state
            const originalText = submitBtn.textContent;
            submitBtn.textContent = 'Adding...';
            submitBtn.disabled = true;
            
            // Submit to API
            fetch('/admin/api/feeds', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    action: 'add', 
                    feedData: { name, url, category, priority } 
                })
            }).then(response => response.json())
            .then(result => {
                if (result.success) {
                    showFormSuccess('Feed added successfully: ' + result.message);
                    setTimeout(() => {
                        hideAddFeedModal();
                        window.location.reload(); // Reload to show new feed
                    }, 1500);
                } else {
                    showFormError('Error adding feed: ' + result.error);
                }
            }).catch(error => {
                showFormError('Network error: ' + error.message);
            }).finally(() => {
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            });
        }

        function showFormError(message) {
            const errorDiv = document.getElementById('form-error');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            errorDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }

        function showFormSuccess(message) {
            const successDiv = document.getElementById('form-success');
            successDiv.textContent = message;
            successDiv.style.display = 'block';
            successDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }

        // Close modal on escape key and background click
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                hideAddFeedModal();
            }
        });

        document.getElementById('add-feed-modal').addEventListener('click', function(e) {
            if (e.target === this) {
                hideAddFeedModal();
            }
        });

        // Enable form submission with Enter key
        document.getElementById('add-feed-form').addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                submitAddFeed();
            }
        });

        window.editFeed = function(feedId) {
            // TODO: Implement edit modal similar to add modal
            const feedItem = document.querySelector(`[data-feed-id="${feedId}"]`);
            const feedName = feedItem?.querySelector('.feed-name')?.textContent || 'Unknown Feed';
            
            // For now, show a better placeholder
            alert(`Edit functionality coming soon!\n\nFeed: ${feedName}\nID: ${feedId}\n\nThis will open an edit modal with the current feed details pre-filled.`);
        }

        window.testFeed = function(feedId) {
            // Find the feed URL from the displayed feeds
            const feedItem = document.querySelector(`[data-feed-id="${feedId}"]`);
            const feedUrl = feedItem?.querySelector('.feed-url')?.textContent;
            
            if (!feedUrl) {
                alert('Could not find feed URL');
                return;
            }
            
            const testBtn = feedItem?.querySelector('.test-btn');
            if (testBtn) {
                testBtn.textContent = 'Testing...';
                testBtn.disabled = true;
            }
            
            fetch('/admin/api/feeds', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    action: 'test', 
                    feedData: { url: feedUrl } 
                })
            }).then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert(`✅ Feed test successful: ${result.message}`);
                } else {
                    alert(`❌ Feed test failed: ${result.error}`);
                }
                
                if (testBtn) {
                    testBtn.textContent = 'Test';
                    testBtn.disabled = false;
                }
            }).catch(error => {
                alert('Network error: ' + error.message);
                if (testBtn) {
                    testBtn.textContent = 'Test';
                    testBtn.disabled = false;
                }
            });
        }

        window.deleteFeed = function(feedId) {
            if (confirm('Are you sure you want to delete this feed?')) {
                alert(`Delete feed ${feedId} - This would remove from sources.ts`);
            }
        }

        window.exportFeeds = function() {
            // RSS_SOURCES is passed from Astro frontmatter
            const data = JSON.stringify({RSS_SOURCES}, null, 2);
            const blob = new Blob([data], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'rss-sources.json';
            a.click();
        }

        window.clearCache = async function() {
            const button = event?.target;
            if (button) {
                const originalText = button.innerHTML;
                button.innerHTML = '<h3>Clearing...</h3><p>Please wait</p>';
                button.disabled = true;
            }
            
            try {
                // 1. Clear browser cache via API call with cache-busting headers
                const response = await fetch('/admin/api/feeds', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache'
                    },
                    body: JSON.stringify({ action: 'clear-cache' })
                });
                
                const result = await response.json();
                
                // 2. Clear Service Worker caches
                if ('serviceWorker' in navigator && 'caches' in window) {
                    const cacheNames = await caches.keys();
                    await Promise.all(
                        cacheNames.map(cacheName => {
                            console.log('Deleting cache:', cacheName);
                            return caches.delete(cacheName);
                        })
                    );
                }
                
                // 3. Unregister and re-register service worker to force update
                if ('serviceWorker' in navigator) {
                    const registration = await navigator.serviceWorker.getRegistration();
                    if (registration) {
                        await registration.unregister();
                        console.log('Service worker unregistered');
                        
                        // Re-register service worker
                        setTimeout(() => {
                            navigator.serviceWorker.register('/sw.js')
                                .then(reg => console.log('Service worker re-registered:', reg))
                                .catch(err => console.log('Service worker registration failed:', err));
                        }, 100);
                    }
                }
                
                // 4. Clear localStorage and sessionStorage
                try {
                    localStorage.clear();
                    sessionStorage.clear();
                } catch (e) {
                    console.log('Storage clearing failed:', e);
                }
                
                if (result.success) {
                    alert('✅ Cache cleared successfully!\n\n' +
                          '• Browser cache cleared\n' +
                          '• Service Worker cache cleared\n' +
                          '• Local storage cleared\n' +
                          '• CDN cache invalidation requested\n\n' +
                          'The page will reload to ensure fresh content.');
                    
                    // Force reload with cache busting
                    window.location.href = window.location.href + '?t=' + Date.now();
                } else {
                    alert('❌ Cache clearing failed: ' + result.error);
                }
                
            } catch (error) {
                console.error('Cache clearing error:', error);
                alert('❌ Cache clearing failed: ' + error.message);
            } finally {
                if (button) {
                    button.innerHTML = originalText;
                    button.disabled = false;
                }
            }
        }

        window.viewLogs = function() {
            window.open('https://github.com/bebhuvan/markets-feeds/actions', '_blank');
        }
    </script>
</body>
</html>