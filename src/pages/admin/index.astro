---
export const prerender = false;

import { RSS_SOURCES } from '../../config/sources';

// Simple password check
const url = new URL(Astro.request.url);
const password = url.searchParams.get('pass') || Astro.cookies.get('admin_pass')?.value;

if (password !== 'MF2025!SecureTeam#AdminAccess789') {
  return Astro.redirect('/admin/login');
}

// Set cookie for future requests
Astro.cookies.set('admin_pass', password, {
  httpOnly: true,
  maxAge: 60 * 60 * 24, // 24 hours
  path: '/'
});

// Load recent links for stats
const linkFiles = await Astro.glob('../../content/links/*.json');
const allLinks = linkFiles.flatMap(file => Array.isArray(file.default) ? file.default : []);
const todayLinks = allLinks.filter(link => {
  const linkDate = new Date(link.publishedAt).toDateString();
  const today = new Date().toDateString();
  return linkDate === today;
});

// Calculate stats
const totalSources = RSS_SOURCES.length;
const activeSources = RSS_SOURCES.filter(s => s.enabled).length;
const articlesToday = todayLinks.length;
const lastUpdate = allLinks.length > 0 ? new Date(Math.max(...allLinks.map(l => new Date(l.fetchedAt).getTime()))) : new Date();

// Error sources (mock data - in real implementation, read from aggregator state)
const errorSources = RSS_SOURCES.filter(s => Math.random() < 0.05); // Mock 5% error rate
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RSS Admin Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            line-height: 1.6;
            color: #2a2a2a;
            background: #fafbfc;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header */
        .header {
            border-bottom: 1px solid #e8ebed;
            padding: 20px 0;
            background: #ffffff;
            margin-bottom: 32px;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .logo {
            font-size: 18px;
            font-weight: 600;
            color: #2a2a2a;
        }

        .admin-badge {
            padding: 4px 8px;
            background: #f0f9ff;
            color: #0369a1;
            font-size: 11px;
            font-weight: 500;
            border-radius: 4px;
            border: 1px solid #e0f2fe;
        }

        .header-actions {
            display: flex;
            gap: 12px;
            align-items: center;
        }

        .btn {
            padding: 8px 16px;
            border: 1px solid #e8ebed;
            background: #ffffff;
            color: #2a2a2a;
            font-size: 14px;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            transition: all 0.15s ease;
        }

        .btn:hover {
            background: #f8fafc;
        }

        .btn-primary {
            background: #3b82f6;
            color: #ffffff;
            border-color: #3b82f6;
        }

        .btn-primary:hover {
            background: #2563eb;
        }

        .btn-danger {
            background: #ef4444;
            color: #ffffff;
            border-color: #ef4444;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .btn-small {
            padding: 4px 8px;
            font-size: 12px;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: #ffffff;
            border: 1px solid #e8ebed;
            border-radius: 8px;
            padding: 24px;
        }

        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }

        .stat-title {
            font-size: 14px;
            color: #6b7280;
            font-weight: 500;
        }

        .stat-trend {
            font-size: 12px;
            padding: 2px 6px;
            border-radius: 3px;
        }

        .trend-up {
            background: #f0fdf4;
            color: #16a34a;
        }

        .trend-down {
            background: #fef2f2;
            color: #dc2626;
        }

        .stat-value {
            font-size: 32px;
            font-weight: 600;
            color: #2a2a2a;
            margin-bottom: 4px;
        }

        .stat-label {
            font-size: 13px;
            color: #9ca3af;
        }

        /* Main Content */
        .main-content {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 32px;
        }

        .content-section {
            background: #ffffff;
            border: 1px solid #e8ebed;
            border-radius: 8px;
        }

        .section-header {
            padding: 20px 24px;
            border-bottom: 1px solid #f1f3f4;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .section-title {
            font-size: 16px;
            font-weight: 600;
            color: #2a2a2a;
        }

        .section-content {
            padding: 24px;
        }

        /* Feed List */
        .feed-list {
            max-height: 600px;
            overflow-y: auto;
        }

        .feed-item {
            padding: 16px 24px;
            border-bottom: 1px solid #f1f3f4;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 16px;
        }

        .feed-item:last-child {
            border-bottom: none;
        }

        .feed-info {
            flex: 1;
        }

        .feed-name {
            font-size: 14px;
            font-weight: 500;
            color: #2a2a2a;
            margin-bottom: 4px;
        }

        .feed-url {
            font-size: 12px;
            color: #6b7280;
            word-break: break-all;
            margin-bottom: 6px;
        }

        .feed-meta {
            display: flex;
            gap: 12px;
            align-items: center;
        }

        .feed-category {
            padding: 2px 6px;
            background: #f3f4f6;
            color: #6b7280;
            font-size: 11px;
            border-radius: 3px;
            text-transform: capitalize;
        }

        .feed-status {
            padding: 2px 6px;
            font-size: 11px;
            border-radius: 3px;
            font-weight: 500;
        }

        .status-active {
            background: #f0fdf4;
            color: #16a34a;
        }

        .status-error {
            background: #fef2f2;
            color: #dc2626;
        }

        .feed-actions {
            display: flex;
            gap: 6px;
            align-items: center;
        }

        .feed-count {
            font-size: 12px;
            color: #9ca3af;
            background: #f3f4f6;
            padding: 2px 6px;
            border-radius: 10px;
            min-width: 20px;
            text-align: center;
        }

        /* Controls */
        .controls {
            display: flex;
            gap: 12px;
            margin-bottom: 20px;
        }

        .search-box {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #e8ebed;
            border-radius: 4px;
            font-size: 14px;
            background: #ffffff;
        }

        .filter-select {
            padding: 8px 12px;
            border: 1px solid #e8ebed;
            border-radius: 4px;
            font-size: 14px;
            background: #ffffff;
            min-width: 120px;
        }

        /* Quick Actions */
        .action-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
        }

        .action-card {
            display: block;
            padding: 20px;
            border: 1px solid #e8ebed;
            border-radius: 8px;
            text-decoration: none;
            color: #2a2a2a;
            transition: all 0.15s ease;
            background: #ffffff;
        }

        .action-card:hover {
            border-color: #3b82f6;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .action-card h3 {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 8px;
            color: #2a2a2a;
        }

        .action-card p {
            font-size: 13px;
            color: #6b7280;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }

            .stats-grid {
                grid-template-columns: 1fr 1fr;
            }

            .header-content {
                flex-direction: column;
                gap: 16px;
            }

            .controls {
                flex-direction: column;
            }

            .feed-item {
                flex-direction: column;
                gap: 12px;
            }

            .feed-actions {
                align-self: flex-start;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <header class="header">
            <div class="header-content">
                <div class="header-left">
                    <div class="logo">Markets Feeds</div>
                    <span class="admin-badge">Admin Dashboard</span>
                </div>
                <div class="header-actions">
                    <button class="btn" id="refresh-all-btn">↻ Refresh All Feeds</button>
                    <a href="/" class="btn">← Back to Feed</a>
                </div>
            </div>
        </header>

        <!-- Stats Grid -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-header">
                    <span class="stat-title">Total Sources</span>
                    <span class="stat-trend trend-up">+2 this week</span>
                </div>
                <div class="stat-value">{totalSources}</div>
                <div class="stat-label">RSS feeds configured</div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <span class="stat-title">Articles Today</span>
                    <span class="stat-trend trend-up">+18%</span>
                </div>
                <div class="stat-value">{articlesToday}</div>
                <div class="stat-label">New articles fetched</div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <span class="stat-title">Active Sources</span>
                    <span class="stat-trend trend-up">98%</span>
                </div>
                <div class="stat-value">{activeSources}</div>
                <div class="stat-label">Sources working properly</div>
            </div>

            <div class="stat-card">
                <div class="stat-header">
                    <span class="stat-title">Last Update</span>
                </div>
                <div class="stat-value">{Math.floor((Date.now() - lastUpdate.getTime()) / 60000)}m</div>
                <div class="stat-label">ago</div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Feed Management -->
            <div class="content-section">
                <div class="section-header">
                    <h2 class="section-title">RSS Sources</h2>
                    <button class="btn btn-primary" onclick="showAddFeed()">+ Add New Feed</button>
                </div>
                
                <div class="section-content">
                    <div class="controls">
                        <input type="search" class="search-box" placeholder="Search feeds..." id="feed-search">
                        <select class="filter-select" id="category-filter">
                            <option value="">All Categories</option>
                            <option value="markets">Markets</option>
                            <option value="research">Research</option>
                            <option value="macro">Economics</option>
                            <option value="policy">Policy</option>
                            <option value="technology">Technology</option>
                        </select>
                        <select class="filter-select" id="status-filter">
                            <option value="">All Status</option>
                            <option value="active">Active</option>
                            <option value="error">Error</option>
                        </select>
                    </div>

                    <div class="feed-list" id="feed-list">
                        {RSS_SOURCES.slice(0, 20).map(source => {
                          const hasError = errorSources.includes(source);
                          const count = Math.floor(Math.random() * 50);
                          return (
                            <div class="feed-item" data-category={source.category} data-status={hasError ? 'error' : 'active'}>
                              <div class="feed-info">
                                <div class="feed-name">{source.name}</div>
                                <div class="feed-url">{source.url}</div>
                                <div class="feed-meta">
                                  <span class="feed-category">{source.category}</span>
                                  <span class={`feed-status ${hasError ? 'status-error' : 'status-active'}`}>
                                    {hasError ? 'Error' : 'Active'}
                                  </span>
                                </div>
                              </div>
                              <div class="feed-actions">
                                <span class="feed-count">{hasError ? 0 : count}</span>
                                <button class="btn btn-small" onclick={`editFeed('${source.id}')`}>Edit</button>
                                <button class="btn btn-small" onclick={`testFeed('${source.id}')`}>Test</button>
                                <button class="btn btn-small btn-danger" onclick={`deleteFeed('${source.id}')`}>Delete</button>
                              </div>
                            </div>
                          );
                        })}
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="content-section">
                <div class="section-header">
                    <h2 class="section-title">Quick Actions</h2>
                </div>
                
                <div class="section-content">
                    <div class="action-grid">
                        <button class="action-card" onclick="window.location.href='/discover'">
                            <h3>Discovery Feed</h3>
                            <p>Manage curated insights and posts</p>
                        </button>
                        <button class="action-card" onclick="refreshAllFeeds()">
                            <h3>Refresh All</h3>
                            <p>Update all RSS feeds now</p>
                        </button>
                        <button class="action-card" onclick="exportFeeds()">
                            <h3>Export Data</h3>
                            <p>Download feed configuration</p>
                        </button>
                        <button class="action-card" onclick="viewLogs()">
                            <h3>View Logs</h3>
                            <p>Check aggregation logs</p>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script define:vars={{ RSS_SOURCES }}>
        // Development mode authentication fallback
        if (!window.location.search.includes('pass=') && sessionStorage.getItem('admin_auth')) {
            const auth = sessionStorage.getItem('admin_auth');
            if (auth === 'MF2025!SecureTeam#AdminAccess789') {
                // Add password to URL for Astro to read
                const url = new URL(window.location.href);
                url.searchParams.set('pass', auth);
                window.history.replaceState({}, '', url);
                // Reload to let Astro process the password
                window.location.reload();
            }
        }

        // Search and filter functionality
        document.getElementById('feed-search')?.addEventListener('input', (e) => {
            const target = e.target as HTMLInputElement;
            const searchTerm = target?.value.toLowerCase() || '';
            const feedItems = document.querySelectorAll('.feed-item');
            
            feedItems.forEach(item => {
                const itemEl = item as HTMLElement;
                const name = item.querySelector('.feed-name')?.textContent?.toLowerCase() || '';
                const url = item.querySelector('.feed-url')?.textContent?.toLowerCase() || '';
                
                if (name.includes(searchTerm) || url.includes(searchTerm)) {
                    itemEl.style.display = 'flex';
                } else {
                    itemEl.style.display = 'none';
                }
            });
        });

        document.getElementById('category-filter')?.addEventListener('change', (e) => {
            const target = e.target as HTMLSelectElement;
            const category = target?.value || '';
            const feedItems = document.querySelectorAll('.feed-item');
            
            feedItems.forEach(item => {
                const itemEl = item as HTMLElement;
                const itemCategory = item.getAttribute('data-category');
                
                if (!category || itemCategory === category) {
                    itemEl.style.display = 'flex';
                } else {
                    itemEl.style.display = 'none';
                }
            });
        });

        document.getElementById('status-filter')?.addEventListener('change', (e) => {
            const target = e.target as HTMLSelectElement;
            const status = target?.value || '';
            const feedItems = document.querySelectorAll('.feed-item');
            
            feedItems.forEach(item => {
                const itemEl = item as HTMLElement;
                const itemStatus = item.getAttribute('data-status');
                
                if (!status || itemStatus === status) {
                    itemEl.style.display = 'flex';
                } else {
                    itemEl.style.display = 'none';
                }
            });
        });

        // Quick actions
        function refreshAllFeeds() {
            const btn = document.getElementById('refresh-all-btn') as HTMLButtonElement;
            if (!btn) return;
            btn.textContent = '↻ Refreshing...';
            btn.disabled = true;
            
            // Trigger GitHub Action or direct refresh
            fetch('https://api.github.com/repos/YOUR_USERNAME/markets-feeds/actions/workflows/aggregate-feeds.yml/dispatches', {
                method: 'POST',
                headers: {
                    'Accept': 'application/vnd.github.v3+json',
                    'Authorization': 'token YOUR_GITHUB_TOKEN', // You'd need to set this up
                },
                body: JSON.stringify({ ref: 'main' })
            }).then(() => {
                if (btn) {
                    btn.textContent = '✓ Refreshed';
                    setTimeout(() => {
                        btn.textContent = '↻ Refresh All Feeds';
                        btn.disabled = false;
                    }, 2000);
                }
            }).catch(() => {
                if (btn) {
                    btn.textContent = '✗ Error';
                    setTimeout(() => {
                        btn.textContent = '↻ Refresh All Feeds';
                        btn.disabled = false;
                    }, 2000);
                }
            });
        }

        function showAddFeed() {
            const name = prompt('Feed Name:');
            const url = prompt('RSS URL:');
            const category = prompt('Category (markets/research/macro/policy/technology):');
            
            if (name && url && category) {
                alert('Add feed functionality would be implemented here.\nYou can manually add to sources.ts for now.');
            }
        }

        function editFeed(feedId: string) {
            alert(`Edit feed ${feedId} - This would open an edit modal`);
        }

        function testFeed(feedId: string) {
            alert(`Testing feed ${feedId}...`);
            // Here you would make a request to test the RSS feed
        }

        function deleteFeed(feedId: string) {
            if (confirm('Are you sure you want to delete this feed?')) {
                alert(`Delete feed ${feedId} - This would remove from sources.ts`);
            }
        }

        function exportFeeds() {
            // RSS_SOURCES is passed from Astro frontmatter
            const data = JSON.stringify({RSS_SOURCES}, null, 2);
            const blob = new Blob([data], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'rss-sources.json';
            a.click();
        }

        function viewLogs() {
            window.open('https://github.com/YOUR_USERNAME/markets-feeds/actions', '_blank');
        }
    </script>
</body>
</html>