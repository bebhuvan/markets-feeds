---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import CategoryHeader from '../components/CategoryHeader.astro';
import LinkCard from '../components/LinkCard.astro';
import type { FeedItem } from '../types';
import '../styles/global.css';

// Load all link data and filter for newsletter content
const linkFiles = await Astro.glob('../content/links/*.json');
const allLinks: FeedItem[] = [];

// Newsletter sources - matching the script configuration
const newsletterSources = [
  'larry-swedroe', 'dave-nadig', 'adam-tooze', 'brad-delong', 'venkatesh-rao',
  'chip-letter', 'china-talk', 'dwarkesh-podcast', 'viks-newsletter', 'gary-marcus',
  'platformer', 'the-zvi', 'paul-krugman', 'apricitas', 'commodity-context',
  'kyla-scanlon', 'moontower', 'grumpy-economist'
];

for (const file of linkFiles) {
  if (Array.isArray(file.default)) {
    allLinks.push(...file.default.filter((item: FeedItem) => 
      newsletterSources.includes(item.sourceId)
    ));
  }
}

// Sort by published date
allLinks.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());
---

<Layout title="Premium Newsletters & Analysis - Markets Feeds" description="Premium newsletters and specialized analysis from leading financial writers">
  
  <div class="container max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 lg:py-12 overflow-x-hidden">
    <CategoryHeader title="Premium Newsletters & Analysis" currentPage="newsletters" />
    
    <Navigation currentPage="newsletters" />
    
    <main id="linkStream">
      {allLinks.length > 0 ? (
        <div>
          {allLinks.map((link) => (
            <LinkCard link={link} />
          ))}
        </div>
      ) : (
        <div class="py-12 text-center text-text-subtle">
          <p>No newsletter content available</p>
        </div>
      )}
    </main>
    
    <div id="emptyState" class="hidden py-12 text-center text-text-subtle">
      <p>No results found</p>
    </div>
  </div>
  
  
  <script>
    // Search functionality
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const linkItems = document.querySelectorAll('.link-item');
    const emptyState = document.getElementById('emptyState');
    const linkStream = document.getElementById('linkStream');
    
    let searchTerm = '';
    
    searchInput.addEventListener('input', () => {
      searchTerm = searchInput.value.toLowerCase();
      applyFilters();
    });
    
    function applyFilters() {
      let visibleCount = 0;
      
      linkItems.forEach(item => {
        const title = item.querySelector('h2')?.textContent?.toLowerCase() || '';
        const summary = item.querySelector('p')?.textContent?.toLowerCase() || '';
        const tags = item.getAttribute('data-tags')?.toLowerCase() || '';
        
        const matchesSearch = searchTerm === '' || 
          title.includes(searchTerm) || 
          summary.includes(searchTerm) ||
          tags.includes(searchTerm);
        
        if (matchesSearch) {
          (item as HTMLElement).style.display = 'block';
          visibleCount++;
        } else {
          (item as HTMLElement).style.display = 'none';
        }
      });
      
      // Show/hide empty state
      if (visibleCount === 0) {
        linkStream?.classList.add('hidden');
        emptyState?.classList.remove('hidden');
      } else {
        linkStream?.classList.remove('hidden');
        emptyState?.classList.add('hidden');
      }
    }
    
    // Global function for tag clicking
    (window as any).filterByTag = function(tag: string) {
      searchInput.value = tag.toLowerCase();
      searchTerm = tag.toLowerCase();
      applyFilters();
      searchInput.focus();
    };
  </script>
</Layout>