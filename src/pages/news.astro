---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import CategoryHeader from '../components/CategoryHeader.astro';
import LinkCard from '../components/LinkCard.astro';
import type { FeedItem } from '../types';
import '../styles/global.css';

// Load only recent link data for performance - limit to latest 3 files
const linkFiles = await Astro.glob('../content/links/*.json');
const sortedFiles = linkFiles.sort((a, b) => {
  const dateA = a.url?.match(/(\d{4}-\d{2}-\d{2})\.json$/)?.[1] || '0000-00-00';
  const dateB = b.url?.match(/(\d{4}-\d{2}-\d{2})\.json$/)?.[1] || '0000-00-00';
  return dateB.localeCompare(dateA);
});

// Load only the latest 3 files to reduce initial load time
const recentFiles = sortedFiles.slice(0, 3);
const allLinks: FeedItem[] = [];

for (const file of recentFiles) {
  if (Array.isArray(file.default)) {
    allLinks.push(...file.default.filter((item: FeedItem) => 
      item.category === 'markets' || item.category === 'macro'
    ));
  }
}

// Sort by published date and limit to 50 most recent articles
allLinks.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());
const displayedLinks = allLinks.slice(0, 50);
---

<Layout title="Market News - Markets Feeds" description="Latest financial news and market updates">
  <div class="container max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6 lg:py-12 overflow-x-hidden">
    <CategoryHeader title="Market News" currentPage="news">
      <div slot="filters" class="flex flex-wrap gap-2 mb-6">
        <button class="filter-btn active" data-filter="all">
          All
        </button>
        <button class="filter-btn" data-filter="markets">
          Markets
        </button>
        <button class="filter-btn" data-filter="macro">
          Macro
        </button>
      </div>
    </CategoryHeader>
    
    <Navigation currentPage="news" />
    
    <main id="linkStream">
      {displayedLinks.length > 0 ? (
        <div>
          {displayedLinks.map((link) => (
            <LinkCard link={link} />
          ))}
        </div>
      ) : (
        <div class="py-12 text-center text-text-subtle">
          <p>No news available</p>
        </div>
      )}
    </main>
    
    <div id="emptyState" class="hidden py-12 text-center text-text-subtle">
      <p>No results found</p>
    </div>
  </div>
  
  <style>
    .filter-btn {
      @apply px-3 py-1.5 text-sm text-text-subtle hover:text-text transition-colors rounded-md hover:bg-accent;
    }
    .filter-btn.active {
      @apply text-text bg-accent;
    }
  </style>
  
  <script>
    // Filter functionality
    const filterBtns = document.querySelectorAll('.filter-btn');
    const linkItems = document.querySelectorAll('.link-item');
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const emptyState = document.getElementById('emptyState');
    const linkStream = document.getElementById('linkStream');
    
    let currentFilter = 'all';
    let searchTerm = '';
    
    // Filter by category
    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        filterBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        currentFilter = btn.getAttribute('data-filter') || 'all';
        applyFilters();
      });
    });
    
    // Search functionality
    searchInput.addEventListener('input', () => {
      searchTerm = searchInput.value.toLowerCase();
      applyFilters();
    });
    
    function applyFilters() {
      let visibleCount = 0;
      
      linkItems.forEach(item => {
        const category = item.getAttribute('data-category');
        const title = item.querySelector('h2')?.textContent?.toLowerCase() || '';
        const summary = item.querySelector('p')?.textContent?.toLowerCase() || '';
        const tags = item.getAttribute('data-tags')?.toLowerCase() || '';
        
        const matchesFilter = currentFilter === 'all' || category === currentFilter;
        const matchesSearch = searchTerm === '' || 
          title.includes(searchTerm) || 
          summary.includes(searchTerm) ||
          tags.includes(searchTerm);
        
        if (matchesFilter && matchesSearch) {
          (item as HTMLElement).style.display = 'block';
          visibleCount++;
        } else {
          (item as HTMLElement).style.display = 'none';
        }
      });
      
      // Show/hide empty state
      if (visibleCount === 0) {
        linkStream?.classList.add('hidden');
        emptyState?.classList.remove('hidden');
      } else {
        linkStream?.classList.remove('hidden');
        emptyState?.classList.add('hidden');
      }
    }
    
    // Global function for tag clicking
    (window as any).filterByTag = function(tag: string) {
      searchInput.value = tag.toLowerCase();
      searchTerm = tag.toLowerCase();
      applyFilters();
      searchInput.focus();
    };
  </script>
</Layout>