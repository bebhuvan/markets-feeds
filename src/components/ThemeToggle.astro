---
---

<button
  id="themeToggle"
  class="w-6 h-6 text-text-subtle hover:text-text transition-colors flex items-center justify-center"
  aria-label="Toggle theme"
>
  <span class="light-icon text-lg">☀</span>
  <span class="dark-icon hidden text-lg">☾</span>
</button>

<script>
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  if (theme === 'dark') {
    document.documentElement.classList.add('dark');
  }

  window.localStorage.setItem('theme', theme || 'light');

  const handleToggleClick = () => {
    const element = document.documentElement;
    
    // Disable transitions temporarily for instant theme change
    document.body.style.transition = 'none';
    
    element.classList.toggle('dark');

    const isDark = element.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');

    const lightIcon = document.querySelector('.light-icon');
    const darkIcon = document.querySelector('.dark-icon');
    
    if (isDark) {
      lightIcon?.classList.add('hidden');
      darkIcon?.classList.remove('hidden');
    } else {
      lightIcon?.classList.remove('hidden');
      darkIcon?.classList.add('hidden');
    }
    
    // Re-enable transitions after a frame
    requestAnimationFrame(() => {
      document.body.style.transition = '';
    });
  };

  document.getElementById('themeToggle')?.addEventListener('click', handleToggleClick);

  // Set initial icon state
  document.addEventListener('DOMContentLoaded', () => {
    const isDark = document.documentElement.classList.contains('dark');
    const lightIcon = document.querySelector('.light-icon');
    const darkIcon = document.querySelector('.dark-icon');
    
    if (isDark) {
      lightIcon?.classList.add('hidden');
      darkIcon?.classList.remove('hidden');
    }
  });
</script>