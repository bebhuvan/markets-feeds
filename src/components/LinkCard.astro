---
import type { FeedItem } from '../types';
import { formatDistanceToNow } from '../utils/date';

export interface Props {
  link: FeedItem;
}

const { link } = Astro.props;

const timeAgo = formatDistanceToNow(new Date(link.publishedAt));
---

<article 
  class="link-item py-6 border-b border-border last:border-b-0"
  data-category={link.category}
  data-source={link.sourceId}
  data-priority={link.priority}
  data-tags={link.tags.join(',')}
>
  <!-- Metadata -->
  <div class="flex items-center gap-3 text-xs mb-2">
    <span class="font-medium text-primary">{link.sourceName}</span>
    <span class="text-text-subtle">·</span>
    <time datetime={link.publishedAt.toString()} class="text-text-subtle">
      {timeAgo}
    </time>
    {link.priority === 'breaking' && (
      <>
        <span class="text-text-subtle">·</span>
        <span class="text-red-600 font-semibold uppercase tracking-wide">Breaking</span>
      </>
    )}
  </div>
  
  <!-- Title -->
  <h2 class="mb-2">
    <a 
      href={link.url}
      target="_blank"
      rel="noopener noreferrer"
      class="text-lg font-semibold leading-snug text-foreground hover:text-primary transition-colors"
    >
      {link.title}
    </a>
  </h2>
  
  <!-- Summary -->
  {link.summary && (
    <p class="text-[15px] text-text-light leading-relaxed line-clamp-2 mb-3">
      {link.summary}
    </p>
  )}
  
  <!-- Tags -->
  {link.tags.length > 0 && (
    <div class="flex flex-wrap gap-2">
      {link.tags.map((tag) => (
        <button 
          class="text-xs text-text-subtle hover:text-primary transition-colors"
          data-tag={tag}
          onclick="filterByTag(this.dataset.tag)"
        >
          #{tag.toLowerCase()}
        </button>
      ))}
    </div>
  )}
</article>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .link-item:first-child {
    border-top: 1px solid hsl(var(--border));
  }
</style>