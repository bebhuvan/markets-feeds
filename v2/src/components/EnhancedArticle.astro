---
import type { FeedItem } from '../types';
import { formatTimeAgo } from '../lib/utils';

export interface Props {
  article: FeedItem;
  index?: number;
  showSource?: boolean;
}

const { article, index = 0, showSource = true } = Astro.props;

// Determine article priority styling
const getPriorityClass = (priority: string, category: string) => {
  if (priority === 'high') return 'priority-high';
  if (category === 'earnings' || category === 'ma') return 'priority-medium';
  return 'priority-normal';
};

// Get category icon
const getCategoryIcon = (category: string) => {
  const icons = {
    markets: '📈',
    earnings: '💰', 
    ma: '🤝',
    crypto: '₿',
    macro: '🏛️',
    technology: '💻',
    research: '📊',
    policy: '📋',
    regulation: '⚖️',
    eclectic: '📚',
    videos: '🎥',
    news: '📰',
    blogs: '✍️',
    filings: '📄'
  };
  return icons[category as keyof typeof icons] || '📰';
};

// Extract domain from URL for display
const getDomain = (url: string) => {
  try {
    return new URL(url).hostname.replace('www.', '');
  } catch {
    return 'source';
  }
};

const priorityClass = getPriorityClass(article.priority, article.category);
const categoryIcon = getCategoryIcon(article.category);
const domain = getDomain(article.url);
---

<article 
  class={`enhanced-article ${priorityClass}`}
  data-article-id={article.url}
  data-category={article.category}
  data-index={index}
>
  <!-- Article Header -->
  <div class="article-header">
    {showSource && (
      <div class="source-info">
        <span class="category-icon" title={`${article.category} category`}>
          {categoryIcon}
        </span>
        <a 
          href={`/source/${article.sourceId}`} 
          class="source-badge"
          title={`View all articles from ${article.sourceName}`}
        >
          {article.sourceName}
        </a>
        <span class="domain-badge" title={domain}>
          {domain}
        </span>
      </div>
    )}
    
    <div class="article-meta">
      <time class="article-time" datetime={article.publishedAt} title={new Date(article.publishedAt).toLocaleString()}>
        {formatTimeAgo(article.publishedAt)}
      </time>
      
      {article.priority === 'high' && (
        <span class="priority-badge" title="High priority article">
          🔥 Hot
        </span>
      )}
    </div>
  </div>

  <!-- Article Content -->
  <div class="article-content">
    <h2 class="article-title">
      <a 
        href={article.url} 
        target="_blank" 
        rel="noopener noreferrer"
        class="article-link"
        title="Read full article"
      >
        {article.title}
        <span class="external-icon" aria-hidden="true">↗</span>
      </a>
    </h2>

    {article.summary ? (
      <p class="article-summary">{article.summary}</p>
    ) : (
      <p class="article-summary no-summary">
        <span class="no-summary-icon">👆</span>
        Click to read the full article
      </p>
    )}

    <!-- Article Tags -->
    {article.tags && article.tags.length > 0 && (
      <div class="article-tags">
        {article.tags.slice(0, 3).map(tag => (
          <span class="article-tag" title={`Browse ${tag} articles`}>
            {tag}
          </span>
        ))}
        {article.tags.length > 3 && (
          <span class="more-tags" title={`${article.tags.length - 3} more tags`}>
            +{article.tags.length - 3}
          </span>
        )}
      </div>
    )}
  </div>

  <!-- Article Actions -->
  <div class="article-actions">
    <button 
      class="action-btn bookmark-btn" 
      title="Bookmark article"
      data-action="bookmark"
    >
      <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"/>
      </svg>
    </button>
    
    <button 
      class="action-btn share-btn" 
      title="Share article"
      data-action="share"
      data-url={article.url}
      data-title={article.title}
    >
      <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="18" cy="5" r="3"/>
        <circle cx="6" cy="12" r="3"/>
        <circle cx="18" cy="19" r="3"/>
        <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"/>
        <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"/>
      </svg>
    </button>
    
    <button 
      class="action-btn mark-read-btn" 
      title="Mark as read"
      data-action="mark-read"
    >
      <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="20 6 9 17 4 12"/>
      </svg>
    </button>

    <div class="reading-progress">
      <div class="progress-bar"></div>
    </div>
  </div>

  <!-- Reading indicator -->
  <div class="reading-indicator">
    <span class="read-badge">✓ Read</span>
  </div>
</article>

<style>
  .enhanced-article {
    position: relative;
    padding: 20px;
    border: 1px solid #f1f5f9;
    border-radius: 12px;
    background: #ffffff;
    transition: all 0.2s ease;
    margin-bottom: 16px;
    overflow: hidden;
  }

  .enhanced-article:hover {
    border-color: #e2e8f0;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    transform: translateY(-1px);
  }

  /* Priority styling */
  .priority-high {
    border-left: 4px solid #dc2626;
    background: linear-gradient(135deg, #ffffff 0%, #fef2f2 100%);
  }

  .priority-high:hover {
    box-shadow: 0 4px 16px rgba(220, 38, 38, 0.1);
  }

  .priority-medium {
    border-left: 4px solid #f59e0b;
  }

  .priority-normal {
    border-left: 4px solid #e5e7eb;
  }

  /* Article Header */
  .article-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 12px;
    gap: 12px;
  }

  .source-info {
    display: flex;
    align-items: center;
    gap: 8px;
    flex: 1;
    min-width: 0;
  }

  .category-icon {
    font-size: 16px;
    flex-shrink: 0;
  }

  .source-badge {
    padding: 4px 8px;
    background: #f0f9ff;
    color: #0369a1;
    font-size: 11px;
    font-weight: 600;
    border-radius: 6px;
    border: 1px solid #e0f2fe;
    text-decoration: none;
    transition: all 0.15s ease;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 120px;
  }

  .source-badge:hover {
    background: #e0f2fe;
    color: #0c4a6e;
    transform: translateY(-1px);
  }

  .domain-badge {
    font-size: 10px;
    color: #9ca3af;
    background: #f9fafb;
    padding: 2px 6px;
    border-radius: 4px;
    border: 1px solid #f3f4f6;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 80px;
  }

  .article-meta {
    display: flex;
    align-items: center;
    gap: 8px;
    flex-shrink: 0;
  }

  .article-time {
    font-size: 11px;
    color: #9ca3af;
    white-space: nowrap;
  }

  .priority-badge {
    padding: 2px 6px;
    background: linear-gradient(135deg, #fef3c7, #fcd34d);
    color: #92400e;
    font-size: 9px;
    font-weight: 700;
    border-radius: 8px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    border: 1px solid #fde68a;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }

  /* Article Content */
  .article-content {
    margin-bottom: 16px;
  }

  .article-title {
    font-size: 16px;
    font-weight: 600;
    line-height: 1.4;
    margin-bottom: 10px;
    color: #1f2937;
  }

  .article-link {
    color: inherit;
    text-decoration: none;
    display: inline-flex;
    align-items: flex-start;
    gap: 4px;
    transition: all 0.15s ease;
  }

  .article-link:hover {
    color: #2563eb;
    text-decoration: underline;
  }

  .external-icon {
    font-size: 12px;
    opacity: 0.5;
    margin-top: 2px;
    transition: all 0.15s ease;
  }

  .article-link:hover .external-icon {
    opacity: 1;
    transform: translate(1px, -1px);
  }

  .article-summary {
    font-size: 14px;
    color: #6b7280;
    line-height: 1.5;
    margin-bottom: 12px;
  }

  .article-summary.no-summary {
    font-style: italic;
    color: #9ca3af;
    font-size: 13px;
    display: flex;
    align-items: center;
    gap: 6px;
  }

  .no-summary-icon {
    font-size: 12px;
    opacity: 0.7;
  }

  /* Article Tags */
  .article-tags {
    display: flex;
    gap: 6px;
    flex-wrap: wrap;
    align-items: center;
  }

  .article-tag {
    padding: 3px 8px;
    background: #f8fafc;
    color: #6b7280;
    font-size: 10px;
    font-weight: 600;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
    text-transform: uppercase;
    letter-spacing: 0.3px;
    cursor: pointer;
    transition: all 0.15s ease;
  }

  .article-tag:hover {
    background: #eff6ff;
    color: #2563eb;
    border-color: #dbeafe;
  }

  .more-tags {
    font-size: 10px;
    color: #9ca3af;
    font-weight: 500;
    padding: 2px 6px;
    background: #f3f4f6;
    border-radius: 8px;
  }

  /* Article Actions */
  .article-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 12px;
    border-top: 1px solid #f9fafb;
  }

  .action-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    background: #ffffff;
    color: #6b7280;
    cursor: pointer;
    transition: all 0.15s ease;
  }

  .action-btn:hover {
    background: #f9fafb;
    color: #374151;
    border-color: #d1d5db;
    transform: translateY(-1px);
  }

  .bookmark-btn.active {
    background: #fef3c7;
    color: #92400e;
    border-color: #fde68a;
  }

  .mark-read-btn.active {
    background: #dcfce7;
    color: #16a34a;
    border-color: #bbf7d0;
  }

  .reading-progress {
    flex: 1;
    height: 2px;
    background: #f3f4f6;
    border-radius: 1px;
    margin: 0 12px;
    overflow: hidden;
  }

  .progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #3b82f6, #1d4ed8);
    border-radius: 1px;
    width: 0%;
    transition: width 0.3s ease;
  }

  /* Reading Indicator */
  .reading-indicator {
    position: absolute;
    top: 16px;
    right: 16px;
    opacity: 0;
    transition: all 0.3s ease;
  }

  .enhanced-article.read .reading-indicator {
    opacity: 1;
  }

  .read-badge {
    padding: 4px 8px;
    background: #dcfce7;
    color: #16a34a;
    font-size: 10px;
    font-weight: 600;
    border-radius: 12px;
    border: 1px solid #bbf7d0;
  }

  /* Read state styling */
  .enhanced-article.read {
    opacity: 0.7;
    background: #f9fafb;
  }

  .enhanced-article.read .article-title {
    color: #6b7280;
  }

  .enhanced-article.read .article-link {
    text-decoration: line-through;
  }

  /* Hidden state */
  .enhanced-article.hidden {
    display: none !important;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .enhanced-article {
      padding: 16px;
      margin-bottom: 12px;
      border-radius: 8px;
    }

    .article-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 8px;
    }

    .source-info {
      width: 100%;
    }

    .source-badge {
      max-width: none;
    }

    .article-title {
      font-size: 15px;
    }

    .article-summary {
      font-size: 13px;
    }

    .article-tags {
      gap: 4px;
    }

    .article-tag {
      font-size: 9px;
      padding: 2px 6px;
    }

    .article-actions {
      gap: 8px;
    }

    .action-btn {
      width: 28px;
      height: 28px;
    }
  }

  @media (max-width: 480px) {
    .enhanced-article {
      padding: 12px;
      margin-bottom: 8px;
    }

    .article-title {
      font-size: 14px;
    }

    .priority-badge {
      font-size: 8px;
      padding: 1px 4px;
    }

    .domain-badge {
      display: none;
    }
  }
</style>

<script>
  // Enhanced article interaction handling
  document.addEventListener('DOMContentLoaded', () => {
    const articles = document.querySelectorAll('.enhanced-article');
    
    articles.forEach(article => {
      const articleUrl = article.getAttribute('data-article-id');
      const bookmarkBtn = article.querySelector('.bookmark-btn');
      const shareBtn = article.querySelector('.share-btn');
      const markReadBtn = article.querySelector('.mark-read-btn');
      const progressBar = article.querySelector('.progress-bar');
      
      // Load saved states
      const bookmarked = localStorage.getItem(`bookmark-${articleUrl}`) === 'true';
      const read = localStorage.getItem(`read-${articleUrl}`) === 'true';
      
      if (bookmarked && bookmarkBtn) {
        bookmarkBtn.classList.add('active');
      }
      
      if (read) {
        article.classList.add('read');
        if (markReadBtn) markReadBtn.classList.add('active');
        if (progressBar) progressBar.style.width = '100%';
      }
      
      // Bookmark functionality
      bookmarkBtn?.addEventListener('click', (e) => {
        e.preventDefault();
        const isBookmarked = bookmarkBtn.classList.toggle('active');
        localStorage.setItem(`bookmark-${articleUrl}`, isBookmarked.toString());
        
        // Show feedback
        showToast(isBookmarked ? 'Article bookmarked' : 'Bookmark removed');
      });
      
      // Share functionality
      shareBtn?.addEventListener('click', async (e) => {
        e.preventDefault();
        const url = shareBtn.getAttribute('data-url');
        const title = shareBtn.getAttribute('data-title');
        
        if (navigator.share) {
          try {
            await navigator.share({ title, url });
          } catch (err) {
            // User cancelled sharing
          }
        } else {
          // Fallback: copy to clipboard
          navigator.clipboard.writeText(url).then(() => {
            showToast('Link copied to clipboard');
          });
        }
      });
      
      // Mark as read functionality
      markReadBtn?.addEventListener('click', (e) => {
        e.preventDefault();
        const isRead = !article.classList.contains('read');
        
        if (isRead) {
          article.classList.add('read');
          markReadBtn.classList.add('active');
          localStorage.setItem(`read-${articleUrl}`, 'true');
          if (progressBar) progressBar.style.width = '100%';
          
          // Update reading stats
          updateReadingStats();
        } else {
          article.classList.remove('read');
          markReadBtn.classList.remove('active');
          localStorage.removeItem(`read-${articleUrl}`);
          if (progressBar) progressBar.style.width = '0%';
        }
        
        showToast(isRead ? 'Marked as read' : 'Marked as unread');
      });
      
      // Track reading on link click
      const articleLink = article.querySelector('.article-link');
      articleLink?.addEventListener('click', () => {
        // Mark as read after a delay
        setTimeout(() => {
          article.classList.add('read');
          if (markReadBtn) markReadBtn.classList.add('active');
          localStorage.setItem(`read-${articleUrl}`, 'true');
          if (progressBar) progressBar.style.width = '100%';
          updateReadingStats();
        }, 1000);
      });
      
      // Intersection Observer for read tracking
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && entry.intersectionRatio > 0.7) {
            const progress = Math.min(100, entry.intersectionRatio * 100);
            if (progressBar) {
              progressBar.style.width = `${progress}%`;
            }
          }
        });
      }, { threshold: [0, 0.5, 0.7, 1] });
      
      observer.observe(article);
    });
  });
  
  // Toast notification system
  function showToast(message) {
    const toast = document.createElement('div');
    toast.className = 'toast-notification';
    toast.textContent = message;
    toast.style.cssText = `
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: #374151;
      color: white;
      padding: 12px 16px;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      z-index: 10000;
      opacity: 0;
      transform: translateY(20px);
      transition: all 0.3s ease;
    `;
    
    document.body.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
      toast.style.opacity = '1';
      toast.style.transform = 'translateY(0)';
    }, 100);
    
    // Remove after delay
    setTimeout(() => {
      toast.style.opacity = '0';
      toast.style.transform = 'translateY(20px)';
      setTimeout(() => {
        document.body.removeChild(toast);
      }, 300);
    }, 2000);
  }
  
  // Update reading statistics
  function updateReadingStats() {
    const readArticles = Object.keys(localStorage)
      .filter(key => key.startsWith('read-'))
      .length;
    
    // Update sidebar stats if they exist
    const readTotalElement = document.getElementById('readTotal');
    if (readTotalElement) {
      readTotalElement.textContent = readArticles.toString();
    }
    
    // Update today's reading count
    const today = new Date().toDateString();
    const todayReads = Object.keys(localStorage)
      .filter(key => key.startsWith('read-') && 
        new Date(localStorage.getItem(key.replace('read-', 'readTime-')) || Date.now()).toDateString() === today
      ).length;
    
    const readTodayElement = document.getElementById('readToday');
    if (readTodayElement) {
      readTodayElement.textContent = todayReads.toString();
    }
  }
</script>