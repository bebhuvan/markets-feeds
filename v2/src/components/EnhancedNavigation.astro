---
import { CATEGORIES } from '../lib/categories';

export interface Props {
  currentCategory?: string;
  categoryCounts: Record<string, number>;
}

const { currentCategory, categoryCounts } = Astro.props;

// Strategic main categories with icons and descriptions
const mainCategories = [
  { key: 'markets', icon: 'üìà', desc: 'Stock market news & analysis' },
  { key: 'earnings', icon: 'üí∞', desc: 'Company earnings reports' },
  { key: 'ma', icon: 'ü§ù', desc: 'Mergers & acquisitions' },
  { key: 'crypto', icon: '‚Çø', desc: 'Cryptocurrency & blockchain' },
  { key: 'macro', icon: 'üèõÔ∏è', desc: 'Economic policy & trends' },
  { key: 'technology', icon: 'üíª', desc: 'Tech industry news' },
  { key: 'eclectic', icon: 'üìö', desc: 'Long-form & insightful reads' },
];

// Secondary categories for dropdown
const secondaryCategories = Object.keys(CATEGORIES)
  .filter(cat => !mainCategories.some(main => main.key === cat))
  .filter(cat => categoryCounts[cat] > 0);

// Calculate total articles
const totalArticles = Object.values(categoryCounts).reduce((a, b) => a + b, 0);
---

<nav class="enhanced-nav">
  <div class="container">
    <div class="nav-container">
      <!-- Main Categories Bar -->
      <div class="nav-main">
        <!-- All Articles -->
        <a 
          href="/" 
          class={`nav-item nav-all ${!currentCategory ? 'active' : ''}`}
          data-count={totalArticles}
        >
          <span class="nav-icon">üåê</span>
          <span class="nav-label">All</span>
          <span class="nav-count">{totalArticles}</span>
        </a>
        
        <!-- Main Categories -->
        {mainCategories.map(category => {
          const count = categoryCounts[category.key] || 0;
          if (count === 0) return null;
          
          return (
            <a 
              href={`/${category.key}`} 
              class={`nav-item ${currentCategory === category.key ? 'active' : ''}`}
              title={category.desc}
              data-count={count}
            >
              <span class="nav-icon">{category.icon}</span>
              <span class="nav-label">{CATEGORIES[category.key as keyof typeof CATEGORIES]}</span>
              <span class="nav-count">{count}</span>
            </a>
          );
        })}
        
        <!-- More Categories Dropdown -->
        {secondaryCategories.length > 0 && (
          <div class="nav-dropdown">
            <button class="nav-item dropdown-trigger">
              <span class="nav-icon">‚ãØ</span>
              <span class="nav-label">More</span>
              <span class="nav-arrow">
                <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M7 10l5 5 5-5z"/>
                </svg>
              </span>
            </button>
            
            <div class="dropdown-menu">
              <div class="dropdown-header">
                <span class="dropdown-title">More Categories</span>
                <span class="dropdown-subtitle">{secondaryCategories.length} additional feeds</span>
              </div>
              
              <div class="dropdown-grid">
                {secondaryCategories.map(categoryKey => {
                  const count = categoryCounts[categoryKey] || 0;
                  const label = CATEGORIES[categoryKey as keyof typeof CATEGORIES];
                  
                  return (
                    <a 
                      href={`/${categoryKey}`}
                      class={`dropdown-item ${currentCategory === categoryKey ? 'active' : ''}`}
                    >
                      <div class="dropdown-item-content">
                        <span class="dropdown-item-label">{label}</span>
                        <span class="dropdown-item-count">{count}</span>
                      </div>
                      {currentCategory === categoryKey && (
                        <div class="active-indicator"></div>
                      )}
                    </a>
                  );
                })}
              </div>
              
              <div class="dropdown-footer">
                <a href="/sources" class="dropdown-action">
                  <span class="action-icon">üîç</span>
                  Browse All Sources
                </a>
              </div>
            </div>
          </div>
        )}
      </div>

      <!-- Mobile Toggle -->
      <button class="mobile-nav-toggle" aria-label="Toggle navigation">
        <span class="hamburger-line"></span>
        <span class="hamburger-line"></span>
        <span class="hamburger-line"></span>
      </button>
    </div>

    <!-- Mobile Navigation Menu -->
    <div class="mobile-nav-menu">
      <div class="mobile-nav-content">
        <div class="mobile-nav-section">
          <h3 class="mobile-nav-title">Main Categories</h3>
          <div class="mobile-nav-items">
            <a href="/" class={`mobile-nav-item ${!currentCategory ? 'active' : ''}`}>
              <span class="mobile-nav-icon">üåê</span>
              <span class="mobile-nav-label">All Articles</span>
              <span class="mobile-nav-count">{totalArticles}</span>
            </a>
            
            {mainCategories.map(category => {
              const count = categoryCounts[category.key] || 0;
              if (count === 0) return null;
              
              return (
                <a 
                  href={`/${category.key}`}
                  class={`mobile-nav-item ${currentCategory === category.key ? 'active' : ''}`}
                >
                  <span class="mobile-nav-icon">{category.icon}</span>
                  <div class="mobile-nav-info">
                    <span class="mobile-nav-label">{CATEGORIES[category.key as keyof typeof CATEGORIES]}</span>
                    <span class="mobile-nav-desc">{category.desc}</span>
                  </div>
                  <span class="mobile-nav-count">{count}</span>
                </a>
              );
            })}
          </div>
        </div>

        {secondaryCategories.length > 0 && (
          <div class="mobile-nav-section">
            <h3 class="mobile-nav-title">More Categories</h3>
            <div class="mobile-nav-grid">
              {secondaryCategories.slice(0, 8).map(categoryKey => {
                const count = categoryCounts[categoryKey] || 0;
                const label = CATEGORIES[categoryKey as keyof typeof CATEGORIES];
                
                return (
                  <a 
                    href={`/${categoryKey}`}
                    class={`mobile-nav-card ${currentCategory === categoryKey ? 'active' : ''}`}
                  >
                    <span class="mobile-card-label">{label}</span>
                    <span class="mobile-card-count">{count}</span>
                  </a>
                );
              })}
            </div>
          </div>
        )}

        <div class="mobile-nav-actions">
          <a href="/search" class="mobile-action-btn search-btn">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
              <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
            </svg>
            Search Articles
          </a>
          <a href="/sources" class="mobile-action-btn">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
            Browse Sources
          </a>
        </div>
      </div>
    </div>
  </div>
</nav>

<style>
  .enhanced-nav {
    background: #ffffff;
    border-bottom: 1px solid #e5e7eb;
    position: sticky;
    top: 0;
    z-index: 90;
  }

  .nav-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
  }

  /* Main Navigation */
  .nav-main {
    display: flex;
    align-items: center;
    gap: 2px;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
  }

  .nav-main::-webkit-scrollbar {
    display: none;
  }

  .nav-item {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 10px 14px;
    text-decoration: none;
    color: #6b7280;
    font-size: 14px;
    font-weight: 500;
    border-radius: 8px;
    transition: all 0.15s ease;
    white-space: nowrap;
    position: relative;
    border: 1px solid transparent;
  }

  .nav-item:hover {
    color: #374151;
    background: #f9fafb;
    border-color: #e5e7eb;
  }

  .nav-item.active {
    color: #374151;
    background: #f1f5f9;
    border-color: #e2e8f0;
  }

  .nav-all {
    background: #f3f4f6;
    border-color: #d1d5db;
  }

  .nav-all.active {
    background: #1f2937;
    color: white;
    border-color: #374151;
  }

  .nav-icon {
    font-size: 16px;
    line-height: 1;
  }

  .nav-label {
    font-weight: 600;
  }

  .nav-count {
    font-size: 11px;
    background: rgba(107, 114, 128, 0.1);
    color: #6b7280;
    padding: 2px 6px;
    border-radius: 10px;
    font-weight: 600;
    min-width: 18px;
    text-align: center;
  }

  .nav-item.active .nav-count {
    background: rgba(107, 114, 128, 0.15);
    color: #374151;
  }

  .nav-all .nav-count {
    background: rgba(255, 255, 255, 0.2);
    color: #6b7280;
  }

  .nav-all.active .nav-count {
    background: rgba(255, 255, 255, 0.2);
    color: white;
  }

  /* Dropdown */
  .nav-dropdown {
    position: relative;
  }

  .dropdown-trigger {
    cursor: pointer;
    border: none;
    background: none;
  }

  .nav-arrow {
    margin-left: 2px;
    transition: transform 0.15s ease;
  }

  .nav-dropdown:hover .nav-arrow {
    transform: rotate(180deg);
  }

  .dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    margin-top: 8px;
    min-width: 320px;
    max-width: 400px;
    background: #ffffff;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    padding: 0;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.2s ease;
    z-index: 100;
  }

  .nav-dropdown:hover .dropdown-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .dropdown-header {
    padding: 16px 16px 8px 16px;
    border-bottom: 1px solid #f3f4f6;
  }

  .dropdown-title {
    font-size: 14px;
    font-weight: 600;
    color: #1f2937;
    display: block;
  }

  .dropdown-subtitle {
    font-size: 12px;
    color: #6b7280;
    margin-top: 2px;
    display: block;
  }

  .dropdown-grid {
    padding: 8px;
    max-height: 300px;
    overflow-y: auto;
  }

  .dropdown-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 10px 12px;
    text-decoration: none;
    color: #374151;
    border-radius: 6px;
    transition: all 0.15s ease;
    position: relative;
    margin-bottom: 2px;
  }

  .dropdown-item:hover {
    background: #f9fafb;
    color: #1f2937;
  }

  .dropdown-item.active {
    background: #f1f5f9;
    color: #374151;
  }

  .dropdown-item-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  .dropdown-item-label {
    font-size: 13px;
    font-weight: 500;
  }

  .dropdown-item-count {
    font-size: 11px;
    background: #f3f4f6;
    color: #6b7280;
    padding: 2px 6px;
    border-radius: 8px;
    font-weight: 600;
  }

  .dropdown-item.active .dropdown-item-count {
    background: #e5e7eb;
    color: #374151;
  }

  .active-indicator {
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 3px;
    height: 16px;
    background: #64748b;
    border-radius: 0 2px 2px 0;
  }

  .dropdown-footer {
    padding: 8px 16px 16px 16px;
    border-top: 1px solid #f3f4f6;
  }

  .dropdown-action {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    background: #f8fafc;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    text-decoration: none;
    color: #6b7280;
    font-size: 13px;
    font-weight: 500;
    transition: all 0.15s ease;
  }

  .dropdown-action:hover {
    background: #f1f5f9;
    color: #475569;
    border-color: #cbd5e1;
  }

  .action-icon {
    font-size: 14px;
  }

  /* Mobile Navigation */
  .mobile-nav-toggle {
    display: none;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 40px;
    height: 40px;
    background: none;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.15s ease;
  }

  .mobile-nav-toggle:hover {
    background: #f9fafb;
    border-color: #d1d5db;
  }

  .hamburger-line {
    width: 18px;
    height: 2px;
    background: #6b7280;
    margin: 2px 0;
    transition: all 0.3s ease;
    border-radius: 1px;
  }

  .mobile-nav-toggle.active .hamburger-line:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  .mobile-nav-toggle.active .hamburger-line:nth-child(2) {
    opacity: 0;
  }

  .mobile-nav-toggle.active .hamburger-line:nth-child(3) {
    transform: rotate(-45deg) translate(7px, -6px);
  }

  .mobile-nav-menu {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 200;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .mobile-nav-menu.active {
    opacity: 1;
    visibility: visible;
  }

  .mobile-nav-content {
    position: absolute;
    top: 0;
    right: 0;
    width: 320px;
    height: 100vh;
    background: #ffffff;
    box-shadow: -4px 0 12px rgba(0, 0, 0, 0.1);
    overflow-y: auto;
    transform: translateX(100%);
    transition: transform 0.3s ease;
  }

  .mobile-nav-menu.active .mobile-nav-content {
    transform: translateX(0);
  }

  .mobile-nav-section {
    padding: 24px 20px;
    border-bottom: 1px solid #f3f4f6;
  }

  .mobile-nav-title {
    font-size: 12px;
    font-weight: 600;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 16px;
  }

  .mobile-nav-items {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .mobile-nav-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    text-decoration: none;
    color: #374151;
    border-radius: 8px;
    transition: all 0.15s ease;
  }

  .mobile-nav-item:hover {
    background: #f9fafb;
  }

  .mobile-nav-item.active {
    background: #f1f5f9;
    color: #374151;
  }

  .mobile-nav-icon {
    font-size: 18px;
    width: 24px;
    text-align: center;
  }

  .mobile-nav-info {
    flex: 1;
  }

  .mobile-nav-label {
    font-size: 15px;
    font-weight: 500;
    display: block;
  }

  .mobile-nav-desc {
    font-size: 12px;
    color: #6b7280;
    display: block;
    margin-top: 2px;
  }

  .mobile-nav-count {
    font-size: 12px;
    background: #f3f4f6;
    color: #6b7280;
    padding: 4px 8px;
    border-radius: 12px;
    font-weight: 600;
  }

  .mobile-nav-item.active .mobile-nav-count {
    background: #e5e7eb;
    color: #374151;
  }

  .mobile-nav-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 8px;
  }

  .mobile-nav-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 16px 12px;
    text-decoration: none;
    color: #374151;
    background: #f8fafc;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    transition: all 0.15s ease;
    text-align: center;
  }

  .mobile-nav-card:hover {
    background: #f1f5f9;
    border-color: #cbd5e1;
  }

  .mobile-nav-card.active {
    background: #f1f5f9;
    border-color: #e2e8f0;
    color: #374151;
  }

  .mobile-card-label {
    font-size: 13px;
    font-weight: 500;
    line-height: 1.3;
  }

  .mobile-card-count {
    font-size: 11px;
    color: #6b7280;
    font-weight: 600;
    margin-top: 4px;
  }

  .mobile-nav-card.active .mobile-card-count {
    color: #374151;
  }

  .mobile-nav-actions {
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .mobile-action-btn {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 14px 16px;
    background: #f8fafc;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    text-decoration: none;
    color: #374151;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.15s ease;
  }

  .mobile-action-btn:hover {
    background: #f1f5f9;
    border-color: #cbd5e1;
  }

  .search-btn {
    background: #f1f5f9;
    border-color: #e2e8f0;
    color: #374151;
  }

  .search-btn:hover {
    background: #e5e7eb;
    border-color: #cbd5e1;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .nav-main {
      flex: 1;
      margin-right: 16px;
    }
  }

  @media (max-width: 768px) {
    .nav-main {
      display: none;
    }
    
    .mobile-nav-toggle {
      display: flex;
    }
    
    .mobile-nav-menu {
      display: block;
    }
  }

  @media (max-width: 480px) {
    .mobile-nav-content {
      width: 100vw;
    }
    
    .mobile-nav-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Dropdown functionality
  const dropdown = document.querySelector('.nav-dropdown');
  const dropdownTrigger = document.querySelector('.dropdown-trigger');
  const dropdownMenu = document.querySelector('.dropdown-menu');
  
  if (dropdown && dropdownTrigger && dropdownMenu) {
    let isDropdownOpen = false;
    
    // Toggle dropdown on click
    dropdownTrigger.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      isDropdownOpen = !isDropdownOpen;
      
      if (isDropdownOpen) {
        dropdownMenu.style.opacity = '1';
        dropdownMenu.style.visibility = 'visible';
        dropdownMenu.style.transform = 'translateY(0)';
      } else {
        dropdownMenu.style.opacity = '0';
        dropdownMenu.style.visibility = 'hidden';
        dropdownMenu.style.transform = 'translateY(-10px)';
      }
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!dropdown.contains(e.target) && isDropdownOpen) {
        isDropdownOpen = false;
        dropdownMenu.style.opacity = '0';
        dropdownMenu.style.visibility = 'hidden';
        dropdownMenu.style.transform = 'translateY(-10px)';
      }
    });
    
    // Close dropdown on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isDropdownOpen) {
        isDropdownOpen = false;
        dropdownMenu.style.opacity = '0';
        dropdownMenu.style.visibility = 'hidden';
        dropdownMenu.style.transform = 'translateY(-10px)';
      }
    });
  }

  // Mobile navigation toggle
  const mobileToggle = document.querySelector('.mobile-nav-toggle');
  const mobileMenu = document.querySelector('.mobile-nav-menu');
  
  if (mobileToggle && mobileMenu) {
    mobileToggle.addEventListener('click', () => {
      mobileToggle.classList.toggle('active');
      mobileMenu.classList.toggle('active');
    });
    
    // Close on overlay click
    mobileMenu.addEventListener('click', (e) => {
      if (e.target === mobileMenu) {
        mobileToggle.classList.remove('active');
        mobileMenu.classList.remove('active');
      }
    });
    
    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && mobileMenu.classList.contains('active')) {
        mobileToggle.classList.remove('active');
        mobileMenu.classList.remove('active');
      }
    });
  }
</script>