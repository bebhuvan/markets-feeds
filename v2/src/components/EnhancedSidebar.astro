---
import { CATEGORIES, SOURCE_CATEGORIES } from '../lib/categories';

export interface Props {
  sourceCounts: Record<string, number>;
  categoryCounts: Record<string, number>;
  currentCategory?: string;
}

const { sourceCounts, categoryCounts, currentCategory } = Astro.props;

// Top sources by article count
const topSources = Object.entries(sourceCounts)
  .sort(([, a], [, b]) => b - a)
  .slice(0, 12);

// Quick filters with dynamic counts
const quickFilters = [
  { id: 'breaking', label: 'üî• Breaking', keywords: ['breaking', 'urgent', 'alert', 'emergency'] },
  { id: 'earnings', label: 'üìä Earnings', keywords: ['earnings', 'quarterly', 'results', 'profit', 'revenue'] },
  { id: 'fed', label: 'üèõÔ∏è Fed Policy', keywords: ['federal reserve', 'fed', 'interest rates', 'monetary policy'] },
  { id: 'crypto', label: '‚Çø Crypto', keywords: ['bitcoin', 'crypto', 'cryptocurrency', 'blockchain'] },
  { id: 'ma', label: 'ü§ù M&A', keywords: ['merger', 'acquisition', 'buyout', 'takeover', 'deal'] },
  { id: 'tech', label: 'üíª Tech', keywords: ['ai', 'artificial intelligence', 'software', 'tech', 'startup'] },
];

// Trending topics (mock data - would be calculated from recent articles)
const trendingTopics = [
  { topic: 'AI Regulation', count: 45, trend: 'up' },
  { topic: 'Rate Cuts', count: 38, trend: 'up' },
  { topic: 'EV Market', count: 32, trend: 'down' },
  { topic: 'Inflation Data', count: 28, trend: 'stable' },
];
---

<aside class="enhanced-sidebar">
  <!-- Quick Filters Section -->
  <div class="sidebar-section">
    <h3 class="sidebar-title">
      <span class="title-icon">‚ö°</span>
      Quick Filters
    </h3>
    <div class="filter-grid">
      {quickFilters.map(filter => (
        <button 
          class="filter-btn" 
          data-filter={filter.id} 
          data-keywords={filter.keywords.join(',')}
          title={`Find articles about ${filter.keywords.join(', ')}`}
        >
          <span class="filter-label">{filter.label}</span>
          <span class="filter-count">0</span>
        </button>
      ))}
    </div>
  </div>

  <!-- Trending Topics -->
  <div class="sidebar-section">
    <h3 class="sidebar-title">
      <span class="title-icon">üî•</span>
      Trending Now
    </h3>
    <div class="trending-list">
      {trendingTopics.map(item => (
        <div class="trending-item">
          <div class="trending-content">
            <span class="trending-topic">{item.topic}</span>
            <span class="trending-count">{item.count} articles</span>
          </div>
          <div class={`trending-indicator ${item.trend}`}>
            {item.trend === 'up' && (
              <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                <polyline points="23 6 13.5 15.5 8.5 10.5 1 18"/>
                <polyline points="17 6 23 6 23 12"/>
              </svg>
            )}
            {item.trend === 'down' && (
              <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                <polyline points="23 18 13.5 8.5 8.5 13.5 1 6"/>
                <polyline points="17 18 23 18 23 12"/>
              </svg>
            )}
            {item.trend === 'stable' && (
              <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                <line x1="1" y1="12" x2="23" y2="12"/>
              </svg>
            )}
          </div>
        </div>
      ))}
    </div>
  </div>

  <!-- Top Sources -->
  <div class="sidebar-section">
    <h3 class="sidebar-title">
      <span class="title-icon">‚≠ê</span>
      Top Sources
      <span class="title-subtitle">Most active today</span>
    </h3>
    <div class="sources-list">
      {topSources.map(([sourceId, count], index) => {
        const displayName = sourceId
          .replace(/-/g, ' ')
          .replace(/\b\w/g, l => l.toUpperCase())
          .replace('Et ', 'ET ')
          .replace('Wsj', 'WSJ')
          .replace('Cnbc', 'CNBC')
          .replace('Bbc', 'BBC');
        
        return (
          <a href={`/source/${sourceId}`} class="source-item">
            <div class="source-rank">#{index + 1}</div>
            <div class="source-info">
              <span class="source-name">{displayName}</span>
              <span class="source-count">{count} articles</span>
            </div>
            <div class="source-indicator">
              <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                <polyline points="9 18 15 12 9 6"/>
              </svg>
            </div>
          </a>
        );
      })}
    </div>
    
    <div class="sources-footer">
      <a href="/sources" class="view-all-btn">
        <span>View All {Object.keys(sourceCounts).length} Sources</span>
        <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
          <line x1="7" y1="17" x2="17" y2="7"/>
          <polyline points="7 7 17 7 17 17"/>
        </svg>
      </a>
    </div>
  </div>

  <!-- Reading Stats -->
  <div class="sidebar-section">
    <h3 class="sidebar-title">
      <span class="title-icon">üìä</span>
      Your Reading
    </h3>
    <div class="reading-stats">
      <div class="stat-card">
        <div class="stat-value" id="readToday">0</div>
        <div class="stat-label">Read Today</div>
      </div>
      <div class="stat-card">
        <div class="stat-value" id="readTotal">0</div>
        <div class="stat-label">Total Read</div>
      </div>
    </div>
    
    <div class="reading-actions">
      <button class="reading-action" id="clearHistory" title="Clear reading history">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
          <polyline points="3 6 5 6 21 6"/>
          <path d="m19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/>
          <line x1="10" y1="11" x2="10" y2="17"/>
          <line x1="14" y1="11" x2="14" y2="17"/>
        </svg>
        Clear History
      </button>
    </div>
  </div>

  <!-- Market Calendar Widget -->
  <div class="sidebar-section">
    <h3 class="sidebar-title">
      <span class="title-icon">üìÖ</span>
      Market Calendar
    </h3>
    <div class="calendar-widget">
      <a href="https://zerodha.com/markets/calendar/" target="_blank" rel="noopener noreferrer" class="calendar-link">
        <div class="calendar-content">
          <div class="calendar-icon">üìà</div>
          <div class="calendar-info">
            <div class="calendar-title">Upcoming Events</div>
            <div class="calendar-subtitle">Earnings, Fed meetings & more</div>
          </div>
          <div class="external-icon">‚Üó</div>
        </div>
      </a>
      
      <!-- Quick upcoming events -->
      <div class="upcoming-events">
        <div class="event-item">
          <div class="event-time">Today</div>
          <div class="event-title">Fed Speech</div>
        </div>
        <div class="event-item">
          <div class="event-time">Tomorrow</div>
          <div class="event-title">CPI Data</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Export Tools -->
  <div class="sidebar-section">
    <h3 class="sidebar-title">
      <span class="title-icon">üì§</span>
      Export Feeds
    </h3>
    <div class="export-tools">
      <a href="/feeds-export.opml" class="export-item" title="Export to RSS readers like Feedly">
        <div class="export-icon">üìã</div>
        <div class="export-info">
          <div class="export-name">OPML File</div>
          <div class="export-desc">For RSS readers</div>
        </div>
      </a>
      <a href="/feeds-export.json" class="export-item" title="Raw JSON data export">
        <div class="export-icon">üìÑ</div>
        <div class="export-info">
          <div class="export-name">JSON Data</div>
          <div class="export-desc">Raw feed data</div>
        </div>
      </a>
    </div>
  </div>
</aside>

<style>
  .enhanced-sidebar {
    background: #ffffff;
    border-radius: 12px;
    border: 1px solid #e5e7eb;
    overflow: hidden;
    max-height: calc(100vh - 140px);
    overflow-y: auto;
    position: sticky;
    top: 20px;
  }

  .enhanced-sidebar::-webkit-scrollbar {
    width: 4px;
  }

  .enhanced-sidebar::-webkit-scrollbar-track {
    background: #f8fafc;
  }

  .enhanced-sidebar::-webkit-scrollbar-thumb {
    background: #e2e8f0;
    border-radius: 2px;
  }

  .enhanced-sidebar::-webkit-scrollbar-thumb:hover {
    background: #cbd5e1;
  }

  .sidebar-section {
    padding: 20px 18px;
    border-bottom: 1px solid #f1f5f9;
  }

  .sidebar-section:last-child {
    border-bottom: none;
  }

  .sidebar-title {
    font-size: 12px;
    font-weight: 700;
    color: #374151;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 16px;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .title-icon {
    font-size: 14px;
  }

  .title-subtitle {
    font-size: 10px;
    color: #9ca3af;
    font-weight: 400;
    text-transform: none;
    margin-left: auto;
  }

  /* Quick Filters */
  .filter-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 8px;
  }

  .filter-btn {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 12px;
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    font-size: 12px;
    color: #475569;
    cursor: pointer;
    transition: all 0.15s ease;
    text-align: left;
  }

  .filter-btn:hover {
    background: #f1f5f9;
    border-color: #cbd5e1;
    transform: translateY(-1px);
  }

  .filter-btn.active {
    background: #eff6ff;
    border-color: #dbeafe;
    color: #2563eb;
  }

  .filter-label {
    font-weight: 600;
  }

  .filter-count {
    font-size: 10px;
    background: #ffffff;
    color: #6b7280;
    padding: 2px 6px;
    border-radius: 6px;
    font-weight: 600;
    min-width: 16px;
    text-align: center;
  }

  .filter-btn.active .filter-count {
    background: #dbeafe;
    color: #2563eb;
  }

  /* Trending Topics */
  .trending-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .trending-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 10px 12px;
    background: #f8fafc;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
  }

  .trending-content {
    display: flex;
    flex-direction: column;
    gap: 2px;
  }

  .trending-topic {
    font-size: 13px;
    font-weight: 600;
    color: #374151;
  }

  .trending-count {
    font-size: 11px;
    color: #6b7280;
  }

  .trending-indicator {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .trending-indicator.up {
    background: #dcfce7;
    color: #16a34a;
  }

  .trending-indicator.down {
    background: #fee2e2;
    color: #dc2626;
  }

  .trending-indicator.stable {
    background: #f3f4f6;
    color: #6b7280;
  }

  /* Sources List */
  .sources-list {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .source-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 10px 12px;
    text-decoration: none;
    color: #374151;
    border-radius: 8px;
    transition: all 0.15s ease;
    border: 1px solid transparent;
  }

  .source-item:hover {
    background: #f8fafc;
    border-color: #e2e8f0;
    transform: translateY(-1px);
  }

  .source-rank {
    width: 24px;
    height: 20px;
    background: #f3f4f6;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 10px;
    font-weight: 700;
    color: #6b7280;
  }

  .source-item:hover .source-rank {
    background: #2563eb;
    color: white;
  }

  .source-info {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 2px;
  }

  .source-name {
    font-size: 13px;
    font-weight: 600;
    line-height: 1;
  }

  .source-count {
    font-size: 11px;
    color: #6b7280;
  }

  .source-indicator {
    color: #cbd5e1;
    transition: all 0.15s ease;
  }

  .source-item:hover .source-indicator {
    color: #2563eb;
    transform: translateX(2px);
  }

  .sources-footer {
    margin-top: 16px;
    padding-top: 16px;
    border-top: 1px solid #f1f5f9;
  }

  .view-all-btn {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 10px 12px;
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    text-decoration: none;
    color: #6b7280;
    font-size: 12px;
    font-weight: 600;
    transition: all 0.15s ease;
  }

  .view-all-btn:hover {
    background: #f1f5f9;
    color: #374151;
    border-color: #cbd5e1;
  }

  /* Reading Stats */
  .reading-stats {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 12px;
    margin-bottom: 16px;
  }

  .stat-card {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 16px 12px;
    text-align: center;
  }

  .stat-value {
    font-size: 20px;
    font-weight: 700;
    color: #1f2937;
    line-height: 1;
  }

  .stat-label {
    font-size: 10px;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-weight: 600;
    margin-top: 4px;
  }

  .reading-actions {
    display: flex;
    justify-content: center;
  }

  .reading-action {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 8px 12px;
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
    border-radius: 6px;
    font-size: 11px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.15s ease;
  }

  .reading-action:hover {
    background: #fecaca;
    border-color: #f87171;
  }

  /* Calendar Widget */
  .calendar-widget {
    background: #f8fafc;
    border-radius: 8px;
    overflow: hidden;
    border: 1px solid #e2e8f0;
  }

  .calendar-link {
    display: flex;
    align-items: center;
    padding: 16px;
    text-decoration: none;
    color: #374151;
    transition: all 0.15s ease;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  .calendar-link:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
  }

  .calendar-content {
    display: flex;
    align-items: center;
    gap: 12px;
    width: 100%;
  }

  .calendar-icon {
    font-size: 20px;
    opacity: 0.9;
  }

  .calendar-info {
    flex: 1;
  }

  .calendar-title {
    font-size: 14px;
    font-weight: 600;
    line-height: 1;
  }

  .calendar-subtitle {
    font-size: 11px;
    opacity: 0.8;
    margin-top: 2px;
  }

  .external-icon {
    font-size: 16px;
    opacity: 0.7;
  }

  .upcoming-events {
    padding: 12px 16px;
    background: white;
  }

  .event-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 6px 0;
  }

  .event-time {
    font-size: 11px;
    color: #6b7280;
    font-weight: 500;
  }

  .event-title {
    font-size: 12px;
    color: #374151;
    font-weight: 600;
  }

  /* Export Tools */
  .export-tools {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .export-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    text-decoration: none;
    color: #374151;
    transition: all 0.15s ease;
  }

  .export-item:hover {
    background: #f1f5f9;
    border-color: #cbd5e1;
    transform: translateY(-1px);
  }

  .export-icon {
    font-size: 18px;
    opacity: 0.8;
  }

  .export-info {
    flex: 1;
  }

  .export-name {
    font-size: 13px;
    font-weight: 600;
    line-height: 1;
  }

  .export-desc {
    font-size: 11px;
    color: #6b7280;
    margin-top: 2px;
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .enhanced-sidebar {
      position: fixed;
      top: 0;
      right: -100%;
      width: 320px;
      height: 100vh;
      max-height: none;
      z-index: 1000;
      transition: right 0.3s ease;
      border-radius: 0;
    }

    .enhanced-sidebar.active {
      right: 0;
    }

    .filter-grid {
      grid-template-columns: 1fr;
    }

    .reading-stats {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Filter functionality with dynamic counting
  const filterButtons = document.querySelectorAll('.filter-btn');
  const articles = document.querySelectorAll('.article');
  
  function updateFilterCounts() {
    filterButtons.forEach(btn => {
      const keywords = btn.getAttribute('data-keywords')?.split(',') || [];
      const count = countMatchingArticles(keywords);
      const countElement = btn.querySelector('.filter-count');
      if (countElement) {
        countElement.textContent = count.toString();
      }
    });
  }
  
  function countMatchingArticles(keywords) {
    let count = 0;
    articles.forEach(article => {
      const title = article.querySelector('.article-title')?.textContent?.toLowerCase() || '';
      const excerpt = article.querySelector('.article-excerpt')?.textContent?.toLowerCase() || '';
      const text = title + ' ' + excerpt;
      
      if (keywords.some(keyword => text.includes(keyword.toLowerCase()))) {
        count++;
      }
    });
    return count;
  }
  
  function filterArticles(keywords, isActive) {
    articles.forEach(article => {
      const title = article.querySelector('.article-title')?.textContent?.toLowerCase() || '';
      const excerpt = article.querySelector('.article-excerpt')?.textContent?.toLowerCase() || '';
      const text = title + ' ' + excerpt;
      
      const matches = keywords.some(keyword => text.includes(keyword.toLowerCase()));
      
      if (isActive) {
        article.style.display = matches ? 'block' : 'none';
      } else {
        const anyFilterActive = document.querySelector('.filter-btn.active');
        if (!anyFilterActive) {
          article.style.display = 'block';
        }
      }
    });
  }
  
  filterButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      const keywords = btn.getAttribute('data-keywords')?.split(',') || [];
      const isActive = btn.classList.toggle('active');
      
      // Single filter mode
      filterButtons.forEach(otherBtn => {
        if (otherBtn !== btn) {
          otherBtn.classList.remove('active');
        }
      });
      
      if (isActive) {
        filterArticles(keywords, true);
      } else {
        articles.forEach(article => {
          article.style.display = 'block';
        });
      }
    });
  });
  
  // Update counts on page load
  document.addEventListener('DOMContentLoaded', updateFilterCounts);
  
  // Reading stats functionality
  function updateReadingStats() {
    const readArticles = JSON.parse(localStorage.getItem('readArticles') || '{"articles":[],"dates":{}}');
    const today = new Date().toDateString();
    const todayCount = readArticles.dates[today]?.length || 0;
    const totalCount = readArticles.articles.length;
    
    const todayElement = document.getElementById('readToday');
    const totalElement = document.getElementById('readTotal');
    
    if (todayElement) todayElement.textContent = todayCount.toString();
    if (totalElement) totalElement.textContent = totalCount.toString();
  }
  
  // Clear reading history
  document.getElementById('clearHistory')?.addEventListener('click', () => {
    if (confirm('Clear all reading history?')) {
      localStorage.removeItem('readArticles');
      updateReadingStats();
      // Remove read classes from articles
      document.querySelectorAll('.article.read').forEach(article => {
        article.classList.remove('read');
      });
    }
  });
  
  // Initialize reading stats
  document.addEventListener('DOMContentLoaded', updateReadingStats);
</script>