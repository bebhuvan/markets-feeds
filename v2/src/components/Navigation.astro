---
import { CATEGORIES } from '../lib/categories';

export interface Props {
  currentCategory?: string;
  categoryCounts: Record<string, number>;
}

const { currentCategory, categoryCounts } = Astro.props;

// Strategic categories - main ones plus extracted distinct types
const mainCategories = ['markets', 'earnings', 'ma', 'crypto', 'macro', 'technology'];
const otherCategories = Object.keys(CATEGORIES).filter(cat => !mainCategories.includes(cat));
---

<nav class="nav">
  <div class="container">
    <div class="nav-container">
      <div class="nav-tabs">
        <a href="/" class={`nav-tab ${!currentCategory ? 'active' : ''}`}>
          All <span class="count">{categoryCounts ? Object.values(categoryCounts).reduce((a, b) => a + b, 0) : 0}</span>
        </a>
        
        {/* Main categories */}
        {mainCategories.map(key => 
          categoryCounts && categoryCounts[key] > 0 && (
            <a 
              href={`/${key}`} 
              class={`nav-tab ${currentCategory === key ? 'active' : ''}`}
            >
              {CATEGORIES[key as keyof typeof CATEGORIES]} 
              <span class="count">{categoryCounts[key]}</span>
            </a>
          )
        )}
        
        {/* Ideas Link */}
        <a href="/ideas" class={`nav-tab ${Astro.url.pathname === '/ideas' ? 'active' : ''}`}>
          Ideas
          <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
            <path d="M9 21c0 .5.4 1 1 1h4c.6 0 1-.5 1-1v-1H9v1zm3-19C8.1 2 5 5.1 5 9c0 2.4 1.2 4.5 3 5.7V17c0 .5.4 1 1 1h6c.6 0 1-.5 1-1v-2.3c1.8-1.3 3-3.4 3-5.7 0-3.9-3.1-7-7-7z"/>
          </svg>
        </a>

        {/* Dropdown for other categories */}
        {categoryCounts && otherCategories.some(cat => categoryCounts[cat] > 0) && (
          <div class="nav-dropdown">
            <button class="nav-tab dropdown-trigger">
              More
              <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                <path d="M7 10l5 5 5-5z"/>
              </svg>
            </button>
            <div class="dropdown-menu">
              {otherCategories.map(key => 
                categoryCounts && categoryCounts[key] > 0 && (
                  <a 
                    href={`/${key}`} 
                    class={`dropdown-item ${currentCategory === key ? 'active' : ''}`}
                  >
                    {CATEGORIES[key as keyof typeof CATEGORIES]}
                    <span class="count">{categoryCounts[key]}</span>
                  </a>
                )
              )}
            </div>
          </div>
        )}
      </div>
      
      <div class="nav-actions">
        <form method="GET" action="/search" class="search-form">
          <input 
            type="search" 
            name="q"
            class="search-box" 
            placeholder="Search articles..." 
            autocomplete="off"
          />
          <button type="submit" class="search-submit">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
              <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
            </svg>
          </button>
        </form>
      </div>
    </div>
  </div>
</nav>

<style>
  .nav {
    background: #ffffff;
    border-bottom: 1px solid #e8ebed;
    padding: 12px 0;
  }

  .nav-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 24px;
  }

  .nav-tabs {
    display: flex;
    gap: 4px;
    align-items: center;
  }

  .nav-tab {
    padding: 8px 14px;
    font-size: 14px;
    color: #6b7280;
    text-decoration: none;
    border-radius: 6px;
    transition: all 0.15s ease;
    display: flex;
    align-items: center;
    gap: 6px;
    white-space: nowrap;
    border: 1px solid transparent;
  }

  .nav-tab:hover {
    color: #2a2a2a;
    background: #f8fafc;
  }

  .nav-tab.active {
    color: #1e40af;
    background: #eff6ff;
    border-color: #dbeafe;
  }

  .count {
    font-size: 12px;
    color: #9ca3af;
    background: #f3f4f6;
    padding: 2px 6px;
    border-radius: 10px;
    min-width: 20px;
    text-align: center;
  }

  .nav-tab.active .count {
    background: #dbeafe;
    color: #1e40af;
  }

  /* Dropdown */
  .nav-dropdown {
    position: relative;
  }

  .dropdown-trigger {
    background: none;
    border: 1px solid transparent;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 4px;
  }

  .dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    margin-top: 4px;
    min-width: 200px;
    background: #ffffff;
    border: 1px solid #e8ebed;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    padding: 8px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-8px);
    transition: all 0.2s ease;
    z-index: 50;
  }

  .nav-dropdown:hover .dropdown-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .dropdown-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 12px;
    color: #6b7280;
    text-decoration: none;
    border-radius: 4px;
    font-size: 14px;
    transition: all 0.15s ease;
  }

  .dropdown-item:hover {
    color: #2a2a2a;
    background: #f8fafc;
  }

  .dropdown-item.active {
    color: #1e40af;
    background: #eff6ff;
  }

  /* Search */
  .search-form {
    display: flex;
    gap: 4px;
    align-items: center;
  }

  .search-box {
    padding: 8px 14px;
    border: 1px solid #e8ebed;
    border-radius: 6px 0 0 6px;
    font-size: 14px;
    width: 200px;
    background: #f8fafc;
    transition: all 0.15s ease;
    border-right: none;
  }

  .search-box:focus {
    outline: none;
    border-color: #3b82f6;
    background: #ffffff;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .search-submit {
    padding: 8px 12px;
    background: #1e40af;
    color: white;
    border: 1px solid #1e40af;
    border-radius: 0 6px 6px 0;
    cursor: pointer;
    transition: all 0.15s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .search-submit:hover {
    background: #1d4ed8;
    border-color: #1d4ed8;
  }

  @media (max-width: 768px) {
    .nav-container {
      flex-direction: column;
      align-items: stretch;
    }
    
    .nav-tabs {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
      padding-bottom: 4px;
    }
    
    .search-form {
      width: 100%;
    }
    
    .search-box {
      width: calc(100% - 44px);
    }
  }
</style>

<script>
  // Handle search form submission
  const searchForm = document.querySelector('.search-form') as HTMLFormElement;
  if (searchForm) {
    searchForm.addEventListener('submit', (e) => {
      const input = searchForm.querySelector('input[name="q"]') as HTMLInputElement;
      if (!input.value.trim()) {
        e.preventDefault();
        input.focus();
      }
    });
  }
</script>