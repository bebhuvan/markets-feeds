---
// User preferences component with client-side storage
---

<div class="preferences-panel" id="preferencesPanel">
  <button class="preferences-toggle" aria-label="User Preferences">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
      <path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>
    </svg>
  </button>
  
  <div class="preferences-dropdown">
    <h3>Reading Preferences</h3>
    
    <div class="preference-section">
      <h4>Display Options</h4>
      
      <label class="preference-option">
        <input type="checkbox" id="hideReadArticles" />
        <span>Hide read articles</span>
      </label>
      
      <label class="preference-option">
        <input type="checkbox" id="markScrolledAsRead" />
        <span>Mark as read when scrolled</span>
      </label>
      
      <label class="preference-option">
        <input type="checkbox" id="compactView" />
        <span>Compact view</span>
      </label>
    </div>
    
    <div class="preference-section">
      <h4>Content Filters</h4>
      
      <label class="preference-option">
        <input type="checkbox" id="hideSponsored" />
        <span>Hide sponsored content</span>
      </label>
      
      <label class="preference-option">
        <input type="checkbox" id="prioritizeUnread" />
        <span>Show unread first</span>
      </label>
    </div>
    
    <div class="preference-section">
      <h4>Reading Stats</h4>
      <div class="reading-stats">
        <div class="stat">
          <span class="stat-label">Articles read today:</span>
          <span class="stat-value" id="readToday">0</span>
        </div>
        <div class="stat">
          <span class="stat-label">Total read:</span>
          <span class="stat-value" id="readTotal">0</span>
        </div>
      </div>
      
      <button class="clear-history-btn" id="clearHistory">
        Clear reading history
      </button>
    </div>
  </div>
</div>

<style>
  .preferences-panel {
    position: fixed;
    top: 70px;
    right: 20px;
    z-index: 500;
  }
  
  .preferences-toggle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #ffffff;
    border: 1px solid #e8ebed;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }
  
  .preferences-toggle:hover {
    background: #f8fafc;
    transform: scale(1.05);
  }
  
  .preferences-dropdown {
    position: absolute;
    top: 50px;
    right: 0;
    width: 280px;
    background: #ffffff;
    border: 1px solid #e8ebed;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    padding: 16px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.2s ease;
  }
  
  .preferences-panel.active .preferences-dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .preferences-dropdown h3 {
    font-size: 14px;
    font-weight: 600;
    color: #2a2a2a;
    margin-bottom: 16px;
    padding-bottom: 8px;
    border-bottom: 1px solid #f3f4f6;
  }
  
  .preference-section {
    margin-bottom: 16px;
  }
  
  .preference-section:last-child {
    margin-bottom: 0;
  }
  
  .preference-section h4 {
    font-size: 12px;
    font-weight: 600;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 8px;
  }
  
  .preference-option {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 6px 0;
    cursor: pointer;
    font-size: 13px;
    color: #4b5563;
  }
  
  .preference-option:hover {
    color: #2a2a2a;
  }
  
  .preference-option input[type="checkbox"] {
    cursor: pointer;
  }
  
  .reading-stats {
    background: #f8fafc;
    border-radius: 6px;
    padding: 12px;
    margin-bottom: 12px;
  }
  
  .stat {
    display: flex;
    justify-content: space-between;
    font-size: 12px;
    padding: 4px 0;
  }
  
  .stat-label {
    color: #6b7280;
  }
  
  .stat-value {
    font-weight: 600;
    color: #2a2a2a;
  }
  
  .clear-history-btn {
    width: 100%;
    padding: 8px;
    background: #fee2e2;
    color: #dc2626;
    border: none;
    border-radius: 6px;
    font-size: 12px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.15s ease;
  }
  
  .clear-history-btn:hover {
    background: #fecaca;
  }
  
  @media (max-width: 768px) {
    .preferences-panel {
      top: auto;
      bottom: 80px;
      right: 20px;
    }
    
    .preferences-dropdown {
      right: 0;
      bottom: 50px;
      top: auto;
    }
  }
</style>

<script>
  // User preferences and read tracking system
  class UserPreferences {
    constructor() {
      this.preferences = this.loadPreferences();
      this.readArticles = this.loadReadArticles();
      this.init();
    }
    
    init() {
      // Toggle preferences panel
      const panel = document.getElementById('preferencesPanel');
      const toggle = panel?.querySelector('.preferences-toggle');
      
      toggle?.addEventListener('click', () => {
        panel?.classList.toggle('active');
      });
      
      // Close when clicking outside
      document.addEventListener('click', (e) => {
        if (!panel?.contains(e.target as Node)) {
          panel?.classList.remove('active');
        }
      });
      
      // Load saved preferences
      this.applyPreferences();
      
      // Setup preference listeners
      this.setupListeners();
      
      // Update reading stats
      this.updateStats();
      
      // Track article reading
      this.trackReading();
    }
    
    loadPreferences() {
      const saved = localStorage.getItem('userPreferences');
      return saved ? JSON.parse(saved) : {
        hideReadArticles: false,
        markScrolledAsRead: false,
        compactView: false,
        hideSponsored: false,
        prioritizeUnread: false
      };
    }
    
    savePreferences() {
      localStorage.setItem('userPreferences', JSON.stringify(this.preferences));
    }
    
    loadReadArticles() {
      const saved = localStorage.getItem('readArticles');
      return saved ? JSON.parse(saved) : {
        articles: [],
        dates: {}
      };
    }
    
    saveReadArticles() {
      localStorage.setItem('readArticles', JSON.stringify(this.readArticles));
    }
    
    applyPreferences() {
      // Apply saved preferences to checkboxes
      Object.keys(this.preferences).forEach(key => {
        const checkbox = document.getElementById(key) as HTMLInputElement;
        if (checkbox) {
          checkbox.checked = this.preferences[key];
        }
      });
      
      // Apply visual changes
      if (this.preferences.compactView) {
        document.body.classList.add('compact-view');
      }
      
      if (this.preferences.hideReadArticles) {
        this.hideReadArticles();
      }
    }
    
    setupListeners() {
      // Preference checkboxes
      const checkboxes = document.querySelectorAll('.preference-option input[type="checkbox"]');
      checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', (e) => {
          const target = e.target as HTMLInputElement;
          this.preferences[target.id] = target.checked;
          this.savePreferences();
          this.handlePreferenceChange(target.id, target.checked);
        });
      });
      
      // Clear history button
      document.getElementById('clearHistory')?.addEventListener('click', () => {
        if (confirm('Clear all reading history?')) {
          this.readArticles = { articles: [], dates: {} };
          this.saveReadArticles();
          this.updateStats();
          this.showAllArticles();
        }
      });
    }
    
    handlePreferenceChange(preference: string, value: boolean) {
      switch(preference) {
        case 'compactView':
          document.body.classList.toggle('compact-view', value);
          break;
        case 'hideReadArticles':
          if (value) {
            this.hideReadArticles();
          } else {
            this.showAllArticles();
          }
          break;
        case 'prioritizeUnread':
          if (value) {
            this.sortByReadStatus();
          }
          break;
      }
    }
    
    markAsRead(articleId: string) {
      if (!this.readArticles.articles.includes(articleId)) {
        this.readArticles.articles.push(articleId);
        
        // Track by date
        const today = new Date().toDateString();
        if (!this.readArticles.dates[today]) {
          this.readArticles.dates[today] = [];
        }
        this.readArticles.dates[today].push(articleId);
        
        this.saveReadArticles();
        this.updateStats();
        
        // Add visual indicator
        const article = document.querySelector(`[data-article-id="${articleId}"]`);
        article?.classList.add('read');
        
        if (this.preferences.hideReadArticles) {
          setTimeout(() => {
            article?.classList.add('hidden');
          }, 500);
        }
      }
    }
    
    trackReading() {
      // Add article IDs to articles
      const articles = document.querySelectorAll('.article');
      articles.forEach((article, index) => {
        const link = article.querySelector('.article-title a') as HTMLAnchorElement;
        const id = link?.href || `article-${index}`;
        article.setAttribute('data-article-id', id);
        
        // Mark if already read
        if (this.readArticles.articles.includes(id)) {
          article.classList.add('read');
        }
        
        // Track clicks
        link?.addEventListener('click', () => {
          this.markAsRead(id);
        });
        
        // Track scroll if enabled
        if (this.preferences.markScrolledAsRead) {
          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting && entry.intersectionRatio > 0.5) {
                setTimeout(() => {
                  this.markAsRead(id);
                }, 2000); // Mark as read after 2 seconds in view
              }
            });
          }, { threshold: 0.5 });
          
          observer.observe(article);
        }
      });
    }
    
    hideReadArticles() {
      this.readArticles.articles.forEach(id => {
        const article = document.querySelector(`[data-article-id="${id}"]`);
        article?.classList.add('hidden');
      });
    }
    
    showAllArticles() {
      document.querySelectorAll('.article.hidden').forEach(article => {
        article.classList.remove('hidden');
      });
    }
    
    sortByReadStatus() {
      const container = document.querySelector('.articles');
      if (!container) return;
      
      const articles = Array.from(container.querySelectorAll('.article'));
      const sorted = articles.sort((a, b) => {
        const aRead = a.classList.contains('read');
        const bRead = b.classList.contains('read');
        
        if (aRead === bRead) return 0;
        return aRead ? 1 : -1;
      });
      
      sorted.forEach(article => container.appendChild(article));
    }
    
    updateStats() {
      const today = new Date().toDateString();
      const todayCount = this.readArticles.dates[today]?.length || 0;
      const totalCount = this.readArticles.articles.length;
      
      const todayElement = document.getElementById('readToday');
      const totalElement = document.getElementById('readTotal');
      
      if (todayElement) todayElement.textContent = todayCount.toString();
      if (totalElement) totalElement.textContent = totalCount.toString();
    }
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new UserPreferences();
  });
</script>

<style global>
  /* Compact view styles */
  .compact-view .article {
    padding: 12px 0;
  }
  
  .compact-view .article-title {
    font-size: 14px;
    margin-bottom: 4px;
  }
  
  .compact-view .article-excerpt {
    display: none;
  }
  
  .compact-view .article-header {
    margin-bottom: 6px;
  }
  
  /* Read article styles */
  .article.read .article-title a {
    color: #9ca3af;
  }
  
  .article.read {
    opacity: 0.7;
  }
  
  .article.hidden {
    display: none !important;
  }
  
  /* Transition for hiding */
  .article {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  .article.read {
    transform: scale(0.98);
  }
</style>