---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import { cacheMonitor, CACHE_POLICY } from '../../lib/cache-policy';

// Get cache metrics and health status
const metrics = cacheMonitor.getMetrics();
const health = cacheMonitor.getHealthSummary();
---

<Layout title="Cache Status - Markets Feeds">
  <div class="cache-status-page">
    <div class="container">
      <!-- Header -->
      <header class="page-header">
        <div class="header-content">
          <div class="header-left">
            <a href="/admin" class="back-link">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/>
              </svg>
            </a>
            <div class="header-title">
              <h1 class="page-title">Cache Status</h1>
              <span class="page-subtitle">Site-wide caching performance and health</span>
            </div>
          </div>
          <div class="health-indicator">
            <div class={`health-badge ${health.status}`}>
              {health.status === 'healthy' && '‚úÖ Healthy'}
              {health.status === 'warning' && '‚ö†Ô∏è Warning'}
              {health.status === 'critical' && 'üö® Critical'}
            </div>
          </div>
        </div>
      </header>

      <!-- Cache Policy Overview -->
      <section class="policy-section">
        <h2 class="section-title">üìã Caching Policy</h2>
        <div class="policy-grid">
          {Object.entries(CACHE_POLICY).map(([key, config]) => (
            <div class="policy-card">
              <div class="policy-header">
                <span class="policy-name">{config.name}</span>
                <span class="policy-ttl">{Math.floor(config.ttl / 60000)}min TTL</span>
              </div>
              <p class="policy-description">{config.description}</p>
              <div class="policy-stats">
                <span class="max-size">Max: {config.maxSize.toLocaleString()} items</span>
              </div>
            </div>
          ))}
        </div>
      </section>

      <!-- Cache Metrics -->
      <section class="metrics-section">
        <h2 class="section-title">üìä Performance Metrics</h2>
        <div class="metrics-grid">
          {Object.entries(metrics).map(([cacheName, data]) => (
            <div class="metric-card">
              <h3 class="metric-name">{cacheName}</h3>
              <div class="metric-stats">
                <div class="stat">
                  <span class="stat-label">Hit Rate</span>
                  <span class={`stat-value ${data.hitRate > 0.7 ? 'good' : data.hitRate > 0.3 ? 'warning' : 'poor'}`}>
                    {(data.hitRate * 100).toFixed(1)}%
                  </span>
                </div>
                <div class="stat">
                  <span class="stat-label">Error Rate</span>
                  <span class={`stat-value ${data.errorRate < 0.05 ? 'good' : 'poor'}`}>
                    {(data.errorRate * 100).toFixed(1)}%
                  </span>
                </div>
                <div class="stat">
                  <span class="stat-label">Total Requests</span>
                  <span class="stat-value">{data.totalRequests.toLocaleString()}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </section>

      <!-- Health Issues -->
      {health.issues.length > 0 && (
        <section class="issues-section">
          <h2 class="section-title">‚ö†Ô∏è Issues Detected</h2>
          <div class="issues-list">
            {health.issues.map(issue => (
              <div class="issue-item">
                <span class="issue-icon">‚ö†Ô∏è</span>
                <span class="issue-text">{issue}</span>
              </div>
            ))}
          </div>
        </section>
      )}

      <!-- Recommendations -->
      {health.recommendations.length > 0 && (
        <section class="recommendations-section">
          <h2 class="section-title">üí° Recommendations</h2>
          <div class="recommendations-list">
            {health.recommendations.map(rec => (
              <div class="recommendation-item">
                <span class="rec-icon">üí°</span>
                <span class="rec-text">{rec}</span>
              </div>
            ))}
          </div>
        </section>
      )}

      <!-- Cache Guidelines -->
      <section class="guidelines-section">
        <h2 class="section-title">üìù Cache Guidelines</h2>
        <div class="guidelines-content">
          <div class="guideline">
            <h4>üîÑ Data Freshness</h4>
            <p>Financial data caches expire every 5 minutes to ensure fresh market information</p>
          </div>
          <div class="guideline">
            <h4>üîç Search Performance</h4>
            <p>Search indexes refresh every 15 minutes, balancing performance with data freshness</p>
          </div>
          <div class="guideline">
            <h4>üíæ Content Enhancement</h4>
            <p>Content processing caches for 1 hour since analysis doesn't change frequently</p>
          </div>
          <div class="guideline">
            <h4>üöÄ Page Rendering</h4>
            <p>Page caches expire every 2 minutes to ensure users see the latest articles</p>
          </div>
        </div>
      </section>

      <!-- Actions -->
      <section class="actions-section">
        <h2 class="section-title">üõ†Ô∏è Cache Management</h2>
        <div class="actions-grid">
          <button class="action-btn primary" onclick="window.location.reload()">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
              <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/>
            </svg>
            Refresh Status
          </button>
          
          <button class="action-btn secondary" onclick="alert('Cache invalidation would be triggered in production')">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
              <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
            </svg>
            Clear All Caches
          </button>
        </div>
      </section>
    </div>
  </div>
</Layout>

<style>
  .cache-status-page {
    min-height: 100vh;
    background: #f8fafc;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  /* Header */
  .page-header {
    background: white;
    border-bottom: 1px solid #e8ebed;
    padding: 24px 0;
    position: sticky;
    top: 0;
    z-index: 100;
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .header-left {
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .back-link {
    color: #6b7280;
    text-decoration: none;
    padding: 8px;
    border-radius: 6px;
    transition: all 0.15s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .back-link:hover {
    background: #f3f4f6;
    color: #2a2a2a;
  }

  .header-title {
    display: flex;
    flex-direction: column;
  }

  .page-title {
    font-size: 24px;
    font-weight: 600;
    color: #2a2a2a;
    margin: 0;
    line-height: 1.2;
  }

  .page-subtitle {
    font-size: 14px;
    color: #6b7280;
    margin-top: 4px;
  }

  .health-indicator {
    display: flex;
    align-items: center;
  }

  .health-badge {
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
  }

  .health-badge.healthy {
    background: #d1fae5;
    color: #059669;
  }

  .health-badge.warning {
    background: #fef3c7;
    color: #d97706;
  }

  .health-badge.critical {
    background: #fee2e2;
    color: #dc2626;
  }

  /* Sections */
  .section-title {
    font-size: 20px;
    font-weight: 600;
    color: #2a2a2a;
    margin: 32px 0 20px 0;
  }

  /* Policy Section */
  .policy-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 16px;
    margin-bottom: 32px;
  }

  .policy-card {
    background: white;
    border: 1px solid #e8ebed;
    border-radius: 8px;
    padding: 20px;
  }

  .policy-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
  }

  .policy-name {
    font-size: 16px;
    font-weight: 600;
    color: #2a2a2a;
  }

  .policy-ttl {
    font-size: 12px;
    color: #6b7280;
    background: #f3f4f6;
    padding: 2px 8px;
    border-radius: 10px;
  }

  .policy-description {
    font-size: 14px;
    color: #6b7280;
    margin: 0 0 12px 0;
    line-height: 1.4;
  }

  .max-size {
    font-size: 12px;
    color: #9ca3af;
  }

  /* Metrics Section */
  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    gap: 16px;
    margin-bottom: 32px;
  }

  .metric-card {
    background: white;
    border: 1px solid #e8ebed;
    border-radius: 8px;
    padding: 20px;
  }

  .metric-name {
    font-size: 16px;
    font-weight: 600;
    color: #2a2a2a;
    margin: 0 0 16px 0;
  }

  .metric-stats {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .stat {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .stat-label {
    font-size: 14px;
    color: #6b7280;
  }

  .stat-value {
    font-size: 14px;
    font-weight: 600;
  }

  .stat-value.good {
    color: #059669;
  }

  .stat-value.warning {
    color: #d97706;
  }

  .stat-value.poor {
    color: #dc2626;
  }

  /* Issues and Recommendations */
  .issues-list, .recommendations-list {
    background: white;
    border: 1px solid #e8ebed;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 32px;
  }

  .issue-item, .recommendation-item {
    display: flex;
    align-items: flex-start;
    gap: 12px;
    padding: 12px 0;
    border-bottom: 1px solid #f3f4f6;
  }

  .issue-item:last-child, .recommendation-item:last-child {
    border-bottom: none;
  }

  .issue-text, .rec-text {
    font-size: 14px;
    color: #2a2a2a;
    line-height: 1.4;
  }

  /* Guidelines */
  .guidelines-content {
    background: white;
    border: 1px solid #e8ebed;
    border-radius: 8px;
    padding: 24px;
    margin-bottom: 32px;
  }

  .guideline {
    padding: 16px 0;
    border-bottom: 1px solid #f3f4f6;
  }

  .guideline:last-child {
    border-bottom: none;
  }

  .guideline h4 {
    font-size: 14px;
    font-weight: 600;
    color: #2a2a2a;
    margin: 0 0 8px 0;
  }

  .guideline p {
    font-size: 14px;
    color: #6b7280;
    margin: 0;
    line-height: 1.4;
  }

  /* Actions */
  .actions-grid {
    display: flex;
    gap: 12px;
    margin-bottom: 32px;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 20px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.15s ease;
    border: none;
    text-decoration: none;
  }

  .action-btn.primary {
    background: #1e40af;
    color: white;
  }

  .action-btn.primary:hover {
    background: #1d4ed8;
    transform: translateY(-1px);
  }

  .action-btn.secondary {
    background: #f3f4f6;
    color: #6b7280;
    border: 1px solid #e8ebed;
  }

  .action-btn.secondary:hover {
    background: #e8ebed;
    color: #2a2a2a;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .header-content {
      flex-direction: column;
      align-items: stretch;
      gap: 16px;
    }
    
    .policy-grid, .metrics-grid {
      grid-template-columns: 1fr;
    }
    
    .actions-grid {
      flex-direction: column;
    }
  }
</style>