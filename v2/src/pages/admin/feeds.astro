---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import { dataLoader } from '../../lib/data-loader';

// Get all feed data to analyze sources
const allItems = await dataLoader.loadData();
const sourceCounts = await dataLoader.getSourceCounts();

// Create feed source summary
const feedSources = Object.entries(sourceCounts).map(([sourceId, count]) => {
  // Find sample articles to get source info
  const sampleArticles = allItems.filter(item => item.sourceId === sourceId).slice(0, 3);
  const latestArticle = sampleArticles[0];
  
  return {
    id: sourceId,
    name: latestArticle?.sourceName || sourceId.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
    articleCount: count,
    lastUpdate: latestArticle?.fetchedAt || latestArticle?.publishedAt,
    status: count > 0 ? 'active' : 'inactive',
    categories: [...new Set(sampleArticles.map(a => a.category))],
    sampleUrl: latestArticle?.url,
    avgPerDay: Math.round(count / 35), // Rough estimate based on ~35 days of data
  };
}).sort((a, b) => b.articleCount - a.articleCount);

const totalFeeds = feedSources.length;
const activeFeeds = feedSources.filter(f => f.status === 'active').length;
const totalArticles = allItems.length;
---

<Layout title="Feed Management - Markets Feeds">
  <div class="admin-page">
    <div class="container">
      <!-- Header -->
      <header class="page-header">
        <div class="header-content">
          <div class="header-left">
            <a href="/admin/dashboard" class="back-link">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/>
              </svg>
            </a>
            <div class="header-title">
              <h1 class="page-title">Feed Management</h1>
              <span class="page-subtitle">Manage all RSS feeds and data sources</span>
            </div>
          </div>
          <div class="header-actions">
            <button class="action-btn primary" onclick="showAddFeedModal()">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
              </svg>
              Add Feed
            </button>
            <button class="action-btn secondary" onclick="bulkActions()">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                <path d="M3 5h2V3c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2v2h2c.6 0 1 .4 1 1s-.4 1-1 1h-1v13c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2V7H2c-.6 0-1-.4-1-1s.4-1 1-1zm4-2v2h10V3H7zm2 7c0-.6.4-1 1-1s1 .4 1 1v6c0 .6-.4 1-1 1s-1-.4-1-1v-6zm4 0c0-.6.4-1 1-1s1 .4 1 1v6c0 .6-.4 1-1 1s-1-.4-1-1v-6z"/>
              </svg>
              Bulk Actions
            </button>
          </div>
        </div>
      </header>

      <!-- Stats -->
      <section class="stats-section">
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-icon">üì°</div>
            <div class="stat-content">
              <div class="stat-value">{totalFeeds}</div>
              <div class="stat-label">Total Feeds</div>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">‚úÖ</div>
            <div class="stat-content">
              <div class="stat-value">{activeFeeds}</div>
              <div class="stat-label">Active Feeds</div>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">üì∞</div>
            <div class="stat-content">
              <div class="stat-value">{totalArticles.toLocaleString()}</div>
              <div class="stat-label">Total Articles</div>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">üìà</div>
            <div class="stat-content">
              <div class="stat-value">{Math.round(totalArticles / totalFeeds)}</div>
              <div class="stat-label">Avg per Feed</div>
            </div>
          </div>
        </div>
      </section>

      <!-- Feed List -->
      <section class="feeds-section">
        <div class="section-header">
          <h2 class="section-title">All Feeds ({totalFeeds})</h2>
          <div class="section-controls">
            <div class="search-box">
              <input type="text" id="feedSearch" placeholder="Search feeds..." onkeyup="filterFeeds()">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                <path d="M15.5 14h-.79l-.28-.27c.98-1.14 1.57-2.62 1.57-4.23 0-3.59-2.91-6.5-6.5-6.5S2.5 5.91 2.5 9.5s2.91 6.5 6.5 6.5c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
              </svg>
            </div>
            <select id="statusFilter" onchange="filterFeeds()">
              <option value="">All Status</option>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
            <select id="sortBy" onchange="sortFeeds()">
              <option value="articles">Sort by Articles</option>
              <option value="name">Sort by Name</option>
              <option value="updated">Sort by Updated</option>
            </select>
          </div>
        </div>

        <div class="feeds-table-container">
          <table class="feeds-table" id="feedsTable">
            <thead>
              <tr>
                <th>
                  <input type="checkbox" id="selectAll" onchange="toggleSelectAll()">
                </th>
                <th>Feed Name</th>
                <th>Source ID</th>
                <th>Status</th>
                <th>Articles</th>
                <th>Categories</th>
                <th>Avg/Day</th>
                <th>Last Update</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {feedSources.map(feed => (
                <tr class="feed-row" data-feed-id={feed.id} data-status={feed.status}>
                  <td>
                    <input type="checkbox" class="feed-checkbox" value={feed.id}>
                  </td>
                  <td>
                    <div class="feed-info">
                      <div class="feed-name">{feed.name}</div>
                      {feed.sampleUrl && (
                        <div class="feed-url">{new URL(feed.sampleUrl).hostname}</div>
                      )}
                    </div>
                  </td>
                  <td>
                    <code class="source-id">{feed.id}</code>
                  </td>
                  <td>
                    <span class={`status-badge ${feed.status}`}>
                      {feed.status === 'active' ? '‚úÖ Active' : '‚ö†Ô∏è Inactive'}
                    </span>
                  </td>
                  <td>
                    <span class="article-count">{feed.articleCount.toLocaleString()}</span>
                  </td>
                  <td>
                    <div class="categories">
                      {feed.categories.slice(0, 3).map(cat => (
                        <span class="category-tag">{cat}</span>
                      ))}
                      {feed.categories.length > 3 && (
                        <span class="category-more">+{feed.categories.length - 3}</span>
                      )}
                    </div>
                  </td>
                  <td>
                    <span class="avg-count">{feed.avgPerDay}</span>
                  </td>
                  <td>
                    <span class="last-update">
                      {feed.lastUpdate ? new Date(feed.lastUpdate).toLocaleDateString() : 'Never'}
                    </span>
                  </td>
                  <td>
                    <div class="feed-actions">
                      <button class="action-btn-small edit" onclick={`editFeed('${feed.id}')`} title="Edit">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                        </svg>
                      </button>
                      <button class="action-btn-small test" onclick={`testFeed('${feed.id}')`} title="Test">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                        </svg>
                      </button>
                      <button class="action-btn-small delete" onclick={`deleteFeed('${feed.id}')`} title="Delete">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                        </svg>
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </section>
    </div>
  </div>

  <!-- Add Feed Modal -->
  <div id="addFeedModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Add New Feed</h3>
        <button class="modal-close" onclick="closeModal('addFeedModal')">&times;</button>
      </div>
      <form id="addFeedForm" onsubmit="submitAddFeed(event)">
        <div class="form-group">
          <label for="feedName">Feed Name</label>
          <input type="text" id="feedName" name="name" required placeholder="e.g., Wall Street Journal">
        </div>
        <div class="form-group">
          <label for="feedUrl">Feed URL</label>
          <input type="url" id="feedUrl" name="url" required placeholder="https://feeds.example.com/rss">
        </div>
        <div class="form-group">
          <label for="sourceId">Source ID</label>
          <input type="text" id="sourceId" name="sourceId" required placeholder="wsj-markets" pattern="[a-z0-9-]+">
          <small>Lowercase letters, numbers, and hyphens only</small>
        </div>
        <div class="form-group">
          <label for="category">Default Category</label>
          <select id="category" name="category" required>
            <option value="">Select category...</option>
            <option value="markets">Markets</option>
            <option value="macro">Macro</option>
            <option value="policy">Policy</option>
            <option value="technology">Technology</option>
            <option value="crypto">Crypto</option>
            <option value="central-banking">Central Banking</option>
            <option value="regulation">Regulation</option>
            <option value="research">Research</option>
            <option value="blogs">Blogs</option>
            <option value="news">News</option>
          </select>
        </div>
        <div class="form-group">
          <label for="fetchInterval">Fetch Interval (minutes)</label>
          <select id="fetchInterval" name="fetchInterval">
            <option value="15">15 minutes</option>
            <option value="30" selected>30 minutes</option>
            <option value="60">1 hour</option>
            <option value="120">2 hours</option>
            <option value="240">4 hours</option>
          </select>
        </div>
        <div class="form-group">
          <label>
            <input type="checkbox" id="isActive" name="active" checked>
            Active (start fetching immediately)
          </label>
        </div>
        <div class="modal-actions">
          <button type="button" class="btn secondary" onclick="closeModal('addFeedModal')">Cancel</button>
          <button type="submit" class="btn primary">Add Feed</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Edit Feed Modal -->
  <div id="editFeedModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Edit Feed</h3>
        <button class="modal-close" onclick="closeModal('editFeedModal')">&times;</button>
      </div>
      <form id="editFeedForm" onsubmit="submitEditFeed(event)">
        <input type="hidden" id="editFeedId" name="feedId">
        <div class="form-group">
          <label for="editFeedName">Feed Name</label>
          <input type="text" id="editFeedName" name="name" required>
        </div>
        <div class="form-group">
          <label for="editFeedUrl">Feed URL</label>
          <input type="url" id="editFeedUrl" name="url" required>
        </div>
        <div class="form-group">
          <label for="editCategory">Default Category</label>
          <select id="editCategory" name="category" required>
            <option value="markets">Markets</option>
            <option value="macro">Macro</option>
            <option value="policy">Policy</option>
            <option value="technology">Technology</option>
            <option value="crypto">Crypto</option>
            <option value="central-banking">Central Banking</option>
            <option value="regulation">Regulation</option>
            <option value="research">Research</option>
            <option value="blogs">Blogs</option>
            <option value="news">News</option>
          </select>
        </div>
        <div class="form-group">
          <label for="editFetchInterval">Fetch Interval (minutes)</label>
          <select id="editFetchInterval" name="fetchInterval">
            <option value="15">15 minutes</option>
            <option value="30">30 minutes</option>
            <option value="60">1 hour</option>
            <option value="120">2 hours</option>
            <option value="240">4 hours</option>
          </select>
        </div>
        <div class="form-group">
          <label>
            <input type="checkbox" id="editIsActive" name="active">
            Active
          </label>
        </div>
        <div class="modal-actions">
          <button type="button" class="btn secondary" onclick="closeModal('editFeedModal')">Cancel</button>
          <button type="submit" class="btn primary">Update Feed</button>
        </div>
      </form>
    </div>
  </div>
</Layout>

<style>
  .admin-page {
    min-height: 100vh;
    background: #f8fafc;
  }

  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 20px;
  }

  /* Header */
  .page-header {
    background: white;
    border-bottom: 1px solid #e8ebed;
    padding: 24px 0;
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .header-left {
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .back-link {
    color: #6b7280;
    text-decoration: none;
    padding: 8px;
    border-radius: 6px;
    transition: all 0.15s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .back-link:hover {
    background: #f3f4f6;
    color: #2a2a2a;
  }

  .header-title {
    display: flex;
    flex-direction: column;
  }

  .page-title {
    font-size: 24px;
    font-weight: 600;
    color: #2a2a2a;
    margin: 0;
    line-height: 1.2;
  }

  .page-subtitle {
    font-size: 14px;
    color: #6b7280;
    margin-top: 4px;
  }

  .header-actions {
    display: flex;
    gap: 12px;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 20px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.15s ease;
    border: none;
    text-decoration: none;
  }

  .action-btn.primary {
    background: #1e40af;
    color: white;
  }

  .action-btn.primary:hover {
    background: #1d4ed8;
    transform: translateY(-1px);
  }

  .action-btn.secondary {
    background: #f3f4f6;
    color: #6b7280;
    border: 1px solid #e8ebed;
  }

  .action-btn.secondary:hover {
    background: #e8ebed;
    color: #2a2a2a;
  }

  /* Stats */
  .stats-section {
    padding: 24px 0;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 16px;
  }

  .stat-card {
    background: white;
    border: 1px solid #e8ebed;
    border-radius: 8px;
    padding: 20px;
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .stat-icon {
    font-size: 32px;
    opacity: 0.8;
  }

  .stat-value {
    font-size: 24px;
    font-weight: 700;
    color: #2a2a2a;
    line-height: 1;
  }

  .stat-label {
    font-size: 12px;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-top: 4px;
  }

  /* Feeds Section */
  .feeds-section {
    background: white;
    border-radius: 12px;
    border: 1px solid #e8ebed;
    margin-bottom: 32px;
    overflow: hidden;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 24px;
    border-bottom: 1px solid #e8ebed;
    background: #f8fafc;
  }

  .section-title {
    font-size: 18px;
    font-weight: 600;
    color: #2a2a2a;
    margin: 0;
  }

  .section-controls {
    display: flex;
    gap: 12px;
    align-items: center;
  }

  .search-box {
    position: relative;
  }

  .search-box input {
    padding: 8px 32px 8px 12px;
    border: 1px solid #e8ebed;
    border-radius: 6px;
    font-size: 14px;
    width: 200px;
  }

  .search-box svg {
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    color: #6b7280;
  }

  .section-controls select {
    padding: 8px 12px;
    border: 1px solid #e8ebed;
    border-radius: 6px;
    font-size: 14px;
    background: white;
  }

  /* Table */
  .feeds-table-container {
    overflow-x: auto;
  }

  .feeds-table {
    width: 100%;
    border-collapse: collapse;
  }

  .feeds-table th,
  .feeds-table td {
    padding: 12px 16px;
    text-align: left;
    border-bottom: 1px solid #f3f4f6;
  }

  .feeds-table th {
    background: #f8fafc;
    font-weight: 600;
    font-size: 12px;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .feeds-table tr:hover {
    background: #f8fafc;
  }

  .feed-info {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .feed-name {
    font-weight: 500;
    color: #2a2a2a;
  }

  .feed-url {
    font-size: 12px;
    color: #6b7280;
    font-family: monospace;
  }

  .source-id {
    font-family: monospace;
    font-size: 12px;
    background: #f3f4f6;
    padding: 2px 6px;
    border-radius: 4px;
    color: #6b7280;
  }

  .status-badge {
    font-size: 12px;
    font-weight: 500;
    padding: 4px 8px;
    border-radius: 12px;
  }

  .status-badge.active {
    background: #d1fae5;
    color: #059669;
  }

  .status-badge.inactive {
    background: #fee2e2;
    color: #dc2626;
  }

  .categories {
    display: flex;
    gap: 4px;
    flex-wrap: wrap;
  }

  .category-tag {
    font-size: 11px;
    background: #f3f4f6;
    color: #6b7280;
    padding: 2px 6px;
    border-radius: 10px;
  }

  .category-more {
    font-size: 11px;
    color: #9ca3af;
  }

  .feed-actions {
    display: flex;
    gap: 4px;
  }

  .action-btn-small {
    padding: 6px;
    border: 1px solid #e8ebed;
    border-radius: 4px;
    background: white;
    cursor: pointer;
    transition: all 0.15s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .action-btn-small:hover {
    background: #f3f4f6;
  }

  .action-btn-small.edit {
    color: #1e40af;
  }

  .action-btn-small.test {
    color: #059669;
  }

  .action-btn-small.delete {
    color: #dc2626;
  }

  /* Modal */
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    align-items: center;
    justify-content: center;
  }

  .modal.show {
    display: flex;
  }

  .modal-content {
    background: white;
    border-radius: 12px;
    width: 90%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 24px;
    border-bottom: 1px solid #e8ebed;
  }

  .modal-header h3 {
    margin: 0;
    font-size: 18px;
    color: #2a2a2a;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 24px;
    color: #6b7280;
    cursor: pointer;
  }

  .form-group {
    margin-bottom: 16px;
  }

  .form-group label {
    display: block;
    font-size: 14px;
    font-weight: 500;
    color: #2a2a2a;
    margin-bottom: 6px;
  }

  .form-group input,
  .form-group select {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #e8ebed;
    border-radius: 6px;
    font-size: 14px;
  }

  .form-group small {
    font-size: 12px;
    color: #6b7280;
    margin-top: 4px;
    display: block;
  }

  .modal-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    padding: 20px 24px;
    border-top: 1px solid #e8ebed;
  }

  .btn {
    padding: 8px 16px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.15s ease;
    border: none;
  }

  .btn.primary {
    background: #1e40af;
    color: white;
  }

  .btn.primary:hover {
    background: #1d4ed8;
  }

  .btn.secondary {
    background: #f3f4f6;
    color: #6b7280;
    border: 1px solid #e8ebed;
  }

  .btn.secondary:hover {
    background: #e8ebed;
    color: #2a2a2a;
  }

  form {
    padding: 20px 24px;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .header-content {
      flex-direction: column;
      gap: 16px;
      align-items: stretch;
    }

    .section-header {
      flex-direction: column;
      gap: 16px;
      align-items: stretch;
    }

    .section-controls {
      flex-direction: column;
      gap: 8px;
    }

    .search-box input {
      width: 100%;
    }
  }
</style>

<script>
  // Feed filtering and sorting
  let allFeeds = Array.from(document.querySelectorAll('.feed-row'));

  function filterFeeds() {
    const search = document.getElementById('feedSearch').value.toLowerCase();
    const status = document.getElementById('statusFilter').value;
    
    allFeeds.forEach(row => {
      const feedName = row.querySelector('.feed-name').textContent.toLowerCase();
      const sourceId = row.querySelector('.source-id').textContent.toLowerCase();
      const feedStatus = row.dataset.status;
      
      const matchesSearch = feedName.includes(search) || sourceId.includes(search);
      const matchesStatus = !status || feedStatus === status;
      
      row.style.display = matchesSearch && matchesStatus ? '' : 'none';
    });
  }

  function sortFeeds() {
    const sortBy = document.getElementById('sortBy').value;
    const tbody = document.querySelector('.feeds-table tbody');
    
    const sortedRows = allFeeds.sort((a, b) => {
      if (sortBy === 'name') {
        const aName = a.querySelector('.feed-name').textContent;
        const bName = b.querySelector('.feed-name').textContent;
        return aName.localeCompare(bName);
      } else if (sortBy === 'articles') {
        const aCount = parseInt(a.querySelector('.article-count').textContent.replace(/,/g, ''));
        const bCount = parseInt(b.querySelector('.article-count').textContent.replace(/,/g, ''));
        return bCount - aCount;
      } else if (sortBy === 'updated') {
        const aDate = a.querySelector('.last-update').textContent;
        const bDate = b.querySelector('.last-update').textContent;
        return new Date(bDate) - new Date(aDate);
      }
      return 0;
    });
    
    sortedRows.forEach(row => tbody.appendChild(row));
  }

  function toggleSelectAll() {
    const selectAll = document.getElementById('selectAll');
    const checkboxes = document.querySelectorAll('.feed-checkbox');
    checkboxes.forEach(cb => cb.checked = selectAll.checked);
  }

  // Modal functions
  function showAddFeedModal() {
    document.getElementById('addFeedModal').classList.add('show');
  }

  function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('show');
  }

  async function editFeed(feedId) {
    try {
      // Load feed data
      const response = await fetch('/api/admin/feeds');
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.message);
      }
      
      const feed = data.data.feeds.find(f => f.sourceId === feedId);
      if (!feed) {
        throw new Error('Feed not found');
      }
      
      // Populate edit form
      document.getElementById('editFeedId').value = feed.id;
      document.getElementById('editFeedName').value = feed.name;
      document.getElementById('editFeedUrl').value = feed.url;
      document.getElementById('editCategory').value = feed.category;
      document.getElementById('editFetchInterval').value = feed.fetchInterval;
      document.getElementById('editIsActive').checked = feed.active;
      
      // Show modal
      document.getElementById('editFeedModal').classList.add('show');
      
    } catch (error) {
      showNotification(`Failed to load feed data: ${error.message}`, 'error');
    }
  }

  async function testFeed(feedId) {
    const button = event.target.closest('button');
    const originalContent = button.innerHTML;
    
    button.disabled = true;
    button.innerHTML = '<svg width="14" height="14" class="spinner" viewBox="0 0 24 24" fill="currentColor"><circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none" opacity="0.25"/><path d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" fill="currentColor"/></svg>';
    
    try {
      // Get feed URL from the row
      const row = button.closest('.feed-row');
      const feedUrl = row.querySelector('.feed-url')?.textContent;
      
      if (!feedUrl) {
        throw new Error('Feed URL not found');
      }
      
      const response = await fetch('/api/admin/test-feed', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url: `https://${feedUrl}`, feedId })
      });
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.message);
      }
      
      const test = data.data.test;
      let message = `Test ${test.status}: ${test.responseTime}ms`;
      
      if (test.itemCount !== undefined) {
        message += `, ${test.itemCount} items`;
      }
      
      if (test.error) {
        message += ` - ${test.error}`;
      }
      
      showNotification(message, test.status === 'success' ? 'success' : test.status === 'warning' ? 'warning' : 'error');
      
    } catch (error) {
      showNotification(`Feed test failed: ${error.message}`, 'error');
    } finally {
      button.disabled = false;
      button.innerHTML = originalContent;
    }
  }

  async function deleteFeed(feedId) {
    if (!confirm('Are you sure you want to delete this feed? This action cannot be undone.')) {
      return;
    }
    
    try {
      // Get the actual feed ID from the configuration
      const response = await fetch('/api/admin/feeds');
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.message);
      }
      
      const feed = data.data.feeds.find(f => f.sourceId === feedId);
      if (!feed) {
        throw new Error('Feed not found');
      }
      
      const deleteResponse = await fetch('/api/admin/feeds', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: feed.id })
      });
      
      const deleteData = await deleteResponse.json();
      
      if (!deleteData.success) {
        throw new Error(deleteData.message);
      }
      
      showNotification('Feed deleted successfully', 'success');
      
      // Remove row from table
      const row = document.querySelector(`[data-feed-id="${feedId}"]`);
      if (row) {
        row.remove();
      }
      
    } catch (error) {
      showNotification(`Failed to delete feed: ${error.message}`, 'error');
    }
  }

  async function bulkActions() {
    const selected = document.querySelectorAll('.feed-checkbox:checked');
    if (selected.length === 0) {
      showNotification('Please select feeds to perform bulk actions', 'warning');
      return;
    }
    
    const action = prompt('Bulk action (delete/activate/deactivate):', 'delete');
    if (!action) return;
    
    if (action === 'delete' && !confirm(`Delete ${selected.length} selected feeds?`)) {
      return;
    }
    
    try {
      if (action === 'delete') {
        const feedIds = Array.from(selected).map(cb => cb.value);
        
        // Get actual feed IDs from configuration
        const response = await fetch('/api/admin/feeds');
        const data = await response.json();
        
        if (!data.success) {
          throw new Error(data.message);
        }
        
        const actualIds = data.data.feeds
          .filter(f => feedIds.includes(f.sourceId))
          .map(f => f.id);
        
        const deleteResponse = await fetch('/api/admin/feeds', {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ ids: actualIds })
        });
        
        const deleteData = await deleteResponse.json();
        
        if (!deleteData.success) {
          throw new Error(deleteData.message);
        }
        
        showNotification(`${deleteData.data.deletedFeeds} feeds deleted successfully`, 'success');
        
        // Remove rows from table
        feedIds.forEach(feedId => {
          const row = document.querySelector(`[data-feed-id="${feedId}"]`);
          if (row) row.remove();
        });
      } else {
        showNotification('Bulk activate/deactivate will be implemented soon', 'info');
      }
      
    } catch (error) {
      showNotification(`Bulk action failed: ${error.message}`, 'error');
    }
  }

  async function submitAddFeed(event) {
    event.preventDefault();
    const formData = new FormData(event.target);
    const submitButton = event.target.querySelector('button[type="submit"]');
    
    submitButton.disabled = true;
    submitButton.textContent = 'Adding...';
    
    try {
      const feedData = {
        name: formData.get('name'),
        url: formData.get('url'),
        sourceId: formData.get('sourceId'),
        category: formData.get('category'),
        fetchInterval: parseInt(formData.get('fetchInterval')),
        active: formData.has('active')
      };
      
      const response = await fetch('/api/admin/feeds', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(feedData)
      });
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.message || (data.errors ? data.errors.join(', ') : 'Unknown error'));
      }
      
      showNotification('Feed added successfully! Refreshing page...', 'success');
      closeModal('addFeedModal');
      
      // Refresh page to show new feed
      setTimeout(() => window.location.reload(), 1500);
      
    } catch (error) {
      showNotification(`Failed to add feed: ${error.message}`, 'error');
    } finally {
      submitButton.disabled = false;
      submitButton.textContent = 'Add Feed';
    }
  }

  async function submitEditFeed(event) {
    event.preventDefault();
    const formData = new FormData(event.target);
    const submitButton = event.target.querySelector('button[type="submit"]');
    
    submitButton.disabled = true;
    submitButton.textContent = 'Updating...';
    
    try {
      const feedData = {
        id: formData.get('feedId'),
        name: formData.get('name'),
        url: formData.get('url'),
        category: formData.get('category'),
        fetchInterval: parseInt(formData.get('fetchInterval')),
        active: formData.has('active')
      };
      
      const response = await fetch('/api/admin/feeds', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(feedData)
      });
      
      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.message || (data.errors ? data.errors.join(', ') : 'Unknown error'));
      }
      
      showNotification('Feed updated successfully! Refreshing page...', 'success');
      closeModal('editFeedModal');
      
      // Refresh page to show updated feed
      setTimeout(() => window.location.reload(), 1500);
      
    } catch (error) {
      showNotification(`Failed to update feed: ${error.message}`, 'error');
    } finally {
      submitButton.disabled = false;
      submitButton.textContent = 'Update Feed';
    }
  }

  // Notification system (reuse from dashboard)
  function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-message">${message}</span>
        <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 5000);
  }

  // Auto-generate source ID from name
  document.getElementById('feedName')?.addEventListener('input', (e) => {
    const name = e.target.value;
    const sourceId = name.toLowerCase()
      .replace(/[^a-z0-9\s]/g, '')
      .replace(/\s+/g, '-')
      .replace(/^-+|-+$/g, '');
    document.getElementById('sourceId').value = sourceId;
  });

  // Close modal when clicking outside
  document.querySelectorAll('.modal').forEach(modal => {
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.remove('show');
      }
    });
  });
</script>

<style>
  /* Notification styles */
  .notification {
    position: fixed;
    top: 20px;
    right: 20px;
    min-width: 300px;
    max-width: 500px;
    background: white;
    border: 1px solid #e8ebed;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    animation: slideIn 0.3s ease-out;
  }
  
  .notification-info { border-left: 4px solid #3b82f6; }
  .notification-success { border-left: 4px solid #10b981; }
  .notification-error { border-left: 4px solid #ef4444; }
  .notification-warning { border-left: 4px solid #f59e0b; }
  
  .notification-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 12px 16px;
  }
  
  .notification-message {
    font-size: 14px;
    color: #2a2a2a;
    line-height: 1.4;
  }
  
  .notification-close {
    background: none;
    border: none;
    font-size: 18px;
    color: #6b7280;
    cursor: pointer;
    padding: 0;
    margin-left: 12px;
  }
  
  .notification-close:hover {
    color: #2a2a2a;
  }
  
  @keyframes slideIn {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }
  
  .spinner {
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
</style>