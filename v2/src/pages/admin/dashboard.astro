---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import { dataLoader } from '../../lib/data-loader';
import { CATEGORIES } from '../../lib/categories';

// Get all feed data for dashboard
const allItems = await dataLoader.loadData();
const categoryCounts = await dataLoader.getCategoryCounts();
const sourceCounts = await dataLoader.getSourceCounts();

// Calculate dashboard metrics
const totalArticles = allItems.length;
const last24Hours = allItems.filter(item => {
  const itemDate = new Date(item.publishedAt);
  const cutoff = new Date(Date.now() - 24 * 60 * 60 * 1000);
  return itemDate >= cutoff;
}).length;

const lastWeek = allItems.filter(item => {
  const itemDate = new Date(item.publishedAt);
  const cutoff = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
  return itemDate >= cutoff;
}).length;

const lastUpdate = allItems.length > 0 
  ? new Date(Math.max(...allItems.map(item => new Date(item.fetchedAt || item.publishedAt).getTime())))
  : new Date();

// Top sources by article count
const topSources = Object.entries(sourceCounts)
  .sort(([, a], [, b]) => b - a)
  .slice(0, 10)
  .map(([sourceId, count]) => ({
    id: sourceId,
    name: sourceId.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
    count
  }));

// Recent articles
const recentArticles = allItems.slice(0, 10);

// Category distribution
const categoryStats = Object.entries(categoryCounts)
  .map(([key, count]) => ({
    key,
    name: CATEGORIES[key as keyof typeof CATEGORIES] || key,
    count,
    percentage: ((count / totalArticles) * 100).toFixed(1)
  }))
  .sort((a, b) => b.count - a.count);

// Feed health metrics
const feedHealth = {
  activeFeeds: Object.keys(sourceCounts).length,
  avgArticlesPerFeed: Math.round(totalArticles / Math.max(Object.keys(sourceCounts).length, 1)),
  categoriesUsed: Object.keys(categoryCounts).length,
  totalCategories: Object.keys(CATEGORIES).length
};

// Calculate freshness score
const avgAge = allItems.length > 0 
  ? allItems.reduce((sum, item) => {
      const age = Date.now() - new Date(item.publishedAt).getTime();
      return sum + (age / (1000 * 60 * 60)); // hours
    }, 0) / allItems.length
  : 0;

const freshnessScore = Math.max(0, Math.min(100, 100 - (avgAge / 24) * 10)); // Decreases as avg age increases
---

<Layout title="Feed Management Dashboard - Markets Feeds">
  <div class="dashboard">
    <div class="container">
      <!-- Dashboard Header -->
      <header class="dashboard-header">
        <div class="header-content">
          <div class="header-left">
            <a href="/" class="back-link">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/>
              </svg>
            </a>
            <div class="header-title">
              <h1 class="page-title">Feed Management Dashboard</h1>
              <span class="page-subtitle">Monitor and manage all feed sources</span>
            </div>
          </div>
          <div class="header-actions">
            <button class="action-btn primary" onclick="refreshFeeds()">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/>
              </svg>
              Refresh Feeds
            </button>
            <a href="/admin/cache-status" class="action-btn secondary">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
              </svg>
              Cache Status
            </a>
          </div>
        </div>
      </header>

      <!-- Key Metrics -->
      <section class="metrics-section">
        <div class="metrics-grid">
          <div class="metric-card primary">
            <div class="metric-icon">ðŸ“Š</div>
            <div class="metric-content">
              <div class="metric-value">{totalArticles.toLocaleString()}</div>
              <div class="metric-label">Total Articles</div>
              <div class="metric-change positive">+{last24Hours} today</div>
            </div>
          </div>

          <div class="metric-card">
            <div class="metric-icon">âš¡</div>
            <div class="metric-content">
              <div class="metric-value">{last24Hours}</div>
              <div class="metric-label">Last 24 Hours</div>
              <div class="metric-change">{lastWeek} this week</div>
            </div>
          </div>

          <div class="metric-card">
            <div class="metric-icon">ðŸ“¡</div>
            <div class="metric-content">
              <div class="metric-value">{feedHealth.activeFeeds}</div>
              <div class="metric-label">Active Feeds</div>
              <div class="metric-change">{feedHealth.avgArticlesPerFeed} avg/feed</div>
            </div>
          </div>

          <div class="metric-card">
            <div class="metric-icon">ðŸ”„</div>
            <div class="metric-content">
              <div class="metric-value">{Math.round(freshnessScore)}%</div>
              <div class="metric-label">Freshness Score</div>
              <div class="metric-change">{new Date(lastUpdate).toLocaleTimeString()}</div>
            </div>
          </div>
        </div>
      </section>

      <!-- Main Dashboard Grid -->
      <div class="dashboard-grid">
        <!-- Category Distribution -->
        <section class="dashboard-card">
          <div class="card-header">
            <h3 class="card-title">Category Distribution</h3>
            <div class="card-actions">
              <a href="/admin/strategic-categories" class="card-action">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"/>
                </svg>
              </a>
            </div>
          </div>
          <div class="category-stats">
            {categoryStats.slice(0, 8).map(cat => (
              <div class="category-stat">
                <div class="category-info">
                  <span class="category-name">{cat.name}</span>
                  <span class="category-count">{cat.count}</span>
                </div>
                <div class="category-bar">
                  <div class="category-fill" style={`width: ${cat.percentage}%`}></div>
                </div>
                <span class="category-percentage">{cat.percentage}%</span>
              </div>
            ))}
          </div>
        </section>

        <!-- Top Sources -->
        <section class="dashboard-card">
          <div class="card-header">
            <h3 class="card-title">Top Sources</h3>
            <div class="card-actions">
              <button class="card-action" onclick="manageSources()">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                </svg>
              </button>
            </div>
          </div>
          <div class="source-list">
            {topSources.map(source => (
              <div class="source-item">
                <div class="source-info">
                  <div class="source-name">{source.name}</div>
                  <div class="source-id">{source.id}</div>
                </div>
                <div class="source-count">{source.count}</div>
              </div>
            ))}
          </div>
        </section>

        <!-- Recent Articles -->
        <section class="dashboard-card full-width">
          <div class="card-header">
            <h3 class="card-title">Recent Articles</h3>
            <div class="card-actions">
              <a href="/" class="card-action">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"/>
                </svg>
              </a>
            </div>
          </div>
          <div class="recent-articles">
            {recentArticles.map(article => (
              <div class="article-item">
                <div class="article-content">
                  <div class="article-title">
                    <a href={article.url} target="_blank" rel="noopener noreferrer">
                      {article.title}
                    </a>
                  </div>
                  <div class="article-meta">
                    <span class="article-source">{article.sourceName}</span>
                    <span class="article-category">{CATEGORIES[article.category as keyof typeof CATEGORIES] || article.category}</span>
                    <span class="article-time">
                      {new Date(article.publishedAt).toLocaleDateString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </span>
                  </div>
                </div>
                <div class="article-actions">
                  <button class="article-action" onclick={`togglePriority('${article.id}')`}>
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                  </button>
                  <button class="article-action" onclick={`hideArticle('${article.id}')`}>
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"/>
                    </svg>
                  </button>
                </div>
              </div>
            ))}
          </div>
        </section>

        <!-- Feed Health Status -->
        <section class="dashboard-card">
          <div class="card-header">
            <h3 class="card-title">Feed Health</h3>
          </div>
          <div class="health-metrics">
            <div class="health-item">
              <div class="health-label">Data Freshness</div>
              <div class="health-value">
                <div class="health-bar">
                  <div class="health-fill" style={`width: ${freshnessScore}%`}></div>
                </div>
                <span>{Math.round(freshnessScore)}%</span>
              </div>
            </div>
            <div class="health-item">
              <div class="health-label">Category Coverage</div>
              <div class="health-value">
                <div class="health-bar">
                  <div class="health-fill" style={`width: ${(feedHealth.categoriesUsed / feedHealth.totalCategories) * 100}%`}></div>
                </div>
                <span>{feedHealth.categoriesUsed}/{feedHealth.totalCategories}</span>
              </div>
            </div>
            <div class="health-item">
              <div class="health-label">Feed Diversity</div>
              <div class="health-value">
                <div class="health-bar">
                  <div class="health-fill" style="width: 85%"></div>
                </div>
                <span>85%</span>
              </div>
            </div>
          </div>
        </section>

        <!-- Quick Actions -->
        <section class="dashboard-card">
          <div class="card-header">
            <h3 class="card-title">Quick Actions</h3>
          </div>
          <div class="quick-actions">
            <button class="quick-action" onclick="refreshFeeds()">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/>
              </svg>
              <span>Refresh All Feeds</span>
            </button>
            <button class="quick-action" onclick="exportData()">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
              </svg>
              <span>Export Data</span>
            </button>
            <a href="/admin/recategorization" class="quick-action">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.22,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.22,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.68 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z"/>
              </svg>
              <span>Manage Categories</span>
            </a>
            <button class="quick-action" onclick="clearCache()">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
              </svg>
              <span>Clear Cache</span>
            </button>
          </div>
        </section>
      </div>
    </div>
  </div>
</Layout>

<style>
  .dashboard {
    min-height: 100vh;
    background: #f8fafc;
  }

  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 20px;
  }

  /* Header */
  .dashboard-header {
    background: white;
    border-bottom: 1px solid #e8ebed;
    padding: 24px 0;
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .header-left {
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .back-link {
    color: #6b7280;
    text-decoration: none;
    padding: 8px;
    border-radius: 6px;
    transition: all 0.15s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .back-link:hover {
    background: #f3f4f6;
    color: #2a2a2a;
  }

  .header-title {
    display: flex;
    flex-direction: column;
  }

  .page-title {
    font-size: 24px;
    font-weight: 600;
    color: #2a2a2a;
    margin: 0;
    line-height: 1.2;
  }

  .page-subtitle {
    font-size: 14px;
    color: #6b7280;
    margin-top: 4px;
  }

  .header-actions {
    display: flex;
    gap: 12px;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 20px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.15s ease;
    border: none;
    text-decoration: none;
  }

  .action-btn.primary {
    background: #1e40af;
    color: white;
  }

  .action-btn.primary:hover {
    background: #1d4ed8;
    transform: translateY(-1px);
  }

  .action-btn.secondary {
    background: #f3f4f6;
    color: #6b7280;
    border: 1px solid #e8ebed;
  }

  .action-btn.secondary:hover {
    background: #e8ebed;
    color: #2a2a2a;
  }

  /* Metrics Section */
  .metrics-section {
    padding: 32px 0;
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
  }

  .metric-card {
    background: white;
    border: 1px solid #e8ebed;
    border-radius: 12px;
    padding: 24px;
    display: flex;
    align-items: center;
    gap: 16px;
    transition: all 0.15s ease;
  }

  .metric-card:hover {
    border-color: #d1d5db;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
  }

  .metric-card.primary {
    background: linear-gradient(135deg, #1e40af, #3b82f6);
    color: white;
    border-color: #1e40af;
  }

  .metric-icon {
    font-size: 32px;
    opacity: 0.8;
  }

  .metric-content {
    flex: 1;
  }

  .metric-value {
    font-size: 28px;
    font-weight: 700;
    line-height: 1;
    margin-bottom: 4px;
  }

  .metric-label {
    font-size: 14px;
    opacity: 0.8;
    margin-bottom: 4px;
  }

  .metric-change {
    font-size: 12px;
    opacity: 0.7;
  }

  .metric-change.positive {
    color: #10b981;
  }

  .metric-card.primary .metric-change.positive {
    color: rgba(255, 255, 255, 0.8);
  }

  /* Dashboard Grid */
  .dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 24px;
    margin-bottom: 32px;
  }

  .dashboard-card {
    background: white;
    border: 1px solid #e8ebed;
    border-radius: 12px;
    overflow: hidden;
  }

  .dashboard-card.full-width {
    grid-column: 1 / -1;
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 24px 16px 24px;
    border-bottom: 1px solid #f3f4f6;
  }

  .card-title {
    font-size: 16px;
    font-weight: 600;
    color: #2a2a2a;
    margin: 0;
  }

  .card-actions {
    display: flex;
    gap: 8px;
  }

  .card-action {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    background: #f8fafc;
    border: 1px solid #e8ebed;
    border-radius: 6px;
    color: #6b7280;
    cursor: pointer;
    transition: all 0.15s ease;
    text-decoration: none;
  }

  .card-action:hover {
    background: #e8ebed;
    color: #2a2a2a;
  }

  /* Category Stats */
  .category-stats {
    padding: 0 24px 24px 24px;
  }

  .category-stat {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 12px 0;
    border-bottom: 1px solid #f3f4f6;
  }

  .category-stat:last-child {
    border-bottom: none;
  }

  .category-info {
    flex: 1;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .category-name {
    font-size: 14px;
    color: #2a2a2a;
    font-weight: 500;
  }

  .category-count {
    font-size: 13px;
    color: #6b7280;
  }

  .category-bar {
    width: 60px;
    height: 6px;
    background: #f3f4f6;
    border-radius: 3px;
    overflow: hidden;
  }

  .category-fill {
    height: 100%;
    background: linear-gradient(90deg, #3b82f6, #1e40af);
    border-radius: 3px;
    transition: width 0.3s ease;
  }

  .category-percentage {
    font-size: 12px;
    color: #9ca3af;
    width: 35px;
    text-align: right;
  }

  /* Source List */
  .source-list {
    padding: 0 24px 24px 24px;
  }

  .source-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 0;
    border-bottom: 1px solid #f3f4f6;
  }

  .source-item:last-child {
    border-bottom: none;
  }

  .source-name {
    font-size: 14px;
    font-weight: 500;
    color: #2a2a2a;
  }

  .source-id {
    font-size: 12px;
    color: #6b7280;
    font-family: monospace;
  }

  .source-count {
    font-size: 14px;
    font-weight: 600;
    color: #1e40af;
    background: #eff6ff;
    padding: 4px 8px;
    border-radius: 12px;
  }

  /* Recent Articles */
  .recent-articles {
    padding: 0 24px 24px 24px;
  }

  .article-item {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 16px;
    padding: 16px 0;
    border-bottom: 1px solid #f3f4f6;
  }

  .article-item:last-child {
    border-bottom: none;
  }

  .article-content {
    flex: 1;
  }

  .article-title a {
    font-size: 14px;
    font-weight: 500;
    color: #2a2a2a;
    text-decoration: none;
    line-height: 1.4;
  }

  .article-title a:hover {
    color: #1e40af;
  }

  .article-meta {
    display: flex;
    gap: 12px;
    margin-top: 6px;
    font-size: 12px;
    color: #6b7280;
  }

  .article-source {
    font-weight: 500;
  }

  .article-category {
    background: #f3f4f6;
    padding: 2px 6px;
    border-radius: 10px;
  }

  .article-actions {
    display: flex;
    gap: 6px;
  }

  .article-action {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
    background: #f8fafc;
    border: 1px solid #e8ebed;
    border-radius: 4px;
    color: #6b7280;
    cursor: pointer;
    transition: all 0.15s ease;
  }

  .article-action:hover {
    background: #e8ebed;
    color: #2a2a2a;
  }

  /* Health Metrics */
  .health-metrics {
    padding: 0 24px 24px 24px;
  }

  .health-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 0;
    border-bottom: 1px solid #f3f4f6;
  }

  .health-item:last-child {
    border-bottom: none;
  }

  .health-label {
    font-size: 14px;
    color: #2a2a2a;
  }

  .health-value {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .health-bar {
    width: 80px;
    height: 6px;
    background: #f3f4f6;
    border-radius: 3px;
    overflow: hidden;
  }

  .health-fill {
    height: 100%;
    background: linear-gradient(90deg, #10b981, #059669);
    border-radius: 3px;
    transition: width 0.3s ease;
  }

  .health-value span {
    font-size: 12px;
    color: #6b7280;
    min-width: 35px;
    text-align: right;
  }

  /* Quick Actions */
  .quick-actions {
    padding: 0 24px 24px 24px;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .quick-action {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px 16px;
    background: #f8fafc;
    border: 1px solid #e8ebed;
    border-radius: 8px;
    color: #2a2a2a;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.15s ease;
    font-size: 14px;
  }

  .quick-action:hover {
    background: #e8ebed;
    transform: translateY(-1px);
  }

  .quick-action svg {
    color: #6b7280;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .header-content {
      flex-direction: column;
      align-items: stretch;
      gap: 16px;
    }
    
    .metrics-grid {
      grid-template-columns: 1fr;
    }
    
    .dashboard-grid {
      grid-template-columns: 1fr;
    }
    
    .article-item {
      flex-direction: column;
      gap: 12px;
    }
    
    .article-actions {
      align-self: flex-end;
    }
  }
</style>

<script>
  // Utility functions for API calls
  async function makeApiCall(url, options = {}) {
    const defaultOptions = {
      headers: {
        'Content-Type': 'application/json',
      },
    };
    
    try {
      const response = await fetch(url, { ...defaultOptions, ...options });
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || `HTTP error! status: ${response.status}`);
      }
      
      return data;
    } catch (error) {
      console.error('API call failed:', error);
      throw error;
    }
  }

  function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-message">${message}</span>
        <button class="notification-close" onclick="this.parentElement.parentElement.remove()">Ã—</button>
      </div>
    `;
    
    // Add to page
    document.body.appendChild(notification);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 5000);
  }

  function setButtonLoading(button, loading) {
    if (loading) {
      button.disabled = true;
      button.dataset.originalText = button.innerHTML;
      button.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="spinner"><circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none" opacity="0.25"/><path d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" fill="currentColor"/></svg> Loading...';
    } else {
      button.disabled = false;
      button.innerHTML = button.dataset.originalText || button.innerHTML;
    }
  }

  async function refreshFeeds() {
    const button = event.target.closest('button');
    setButtonLoading(button, true);
    
    try {
      const result = await makeApiCall('/api/admin/refresh-feeds', {
        method: 'POST'
      });
      
      showNotification('Feeds refreshed successfully! Page will reload in 2 seconds.', 'success');
      
      // Update metrics on page
      if (result.data) {
        setTimeout(() => {
          window.location.reload();
        }, 2000);
      }
    } catch (error) {
      showNotification(`Failed to refresh feeds: ${error.message}`, 'error');
    } finally {
      setButtonLoading(button, false);
    }
  }

  async function exportData() {
    const button = event.target.closest('button');
    setButtonLoading(button, true);
    
    try {
      // Show export options
      const format = prompt('Export format (json/csv):', 'json');
      if (!format || !['json', 'csv'].includes(format.toLowerCase())) {
        showNotification('Export cancelled or invalid format', 'info');
        return;
      }
      
      const days = prompt('Number of days to export (0 for all):', '7');
      const daysNum = parseInt(days) || 0;
      
      // Download file
      const url = `/api/admin/export-data?format=${format}&days=${daysNum}`;
      const link = document.createElement('a');
      link.href = url;
      link.download = `markets-feeds-export-${new Date().toISOString().split('T')[0]}.${format}`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      showNotification(`Export started! Download should begin shortly.`, 'success');
    } catch (error) {
      showNotification(`Failed to export data: ${error.message}`, 'error');
    } finally {
      setButtonLoading(button, false);
    }
  }

  function manageSources() {
    // Navigate to feed management
    window.location.href = '/admin/feeds';
  }

  async function clearCache() {
    if (!confirm('Are you sure you want to clear all caches? This will temporarily slow down the site.')) {
      return;
    }
    
    const button = event.target.closest('button');
    setButtonLoading(button, true);
    
    try {
      const result = await makeApiCall('/api/admin/clear-cache', {
        method: 'POST',
        body: JSON.stringify({ cacheType: 'all' })
      });
      
      showNotification('Cache cleared successfully! Site performance may be slower temporarily.', 'success');
      
      // Update metrics if available
      if (result.data && result.data.metrics) {
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      }
    } catch (error) {
      showNotification(`Failed to clear cache: ${error.message}`, 'error');
    } finally {
      setButtonLoading(button, false);
    }
  }

  async function togglePriority(articleId) {
    try {
      const result = await makeApiCall('/api/admin/article-actions', {
        method: 'POST',
        body: JSON.stringify({ 
          action: 'togglePriority', 
          articleId: articleId 
        })
      });
      
      showNotification(result.message, 'success');
    } catch (error) {
      showNotification(`Failed to toggle priority: ${error.message}`, 'error');
    }
  }

  async function hideArticle(articleId) {
    if (!confirm('Are you sure you want to hide this article?')) {
      return;
    }
    
    try {
      const result = await makeApiCall('/api/admin/article-actions', {
        method: 'POST',
        body: JSON.stringify({ 
          action: 'hideArticle', 
          articleId: articleId 
        })
      });
      
      showNotification(result.message, 'success');
      
      // Hide the article row
      const articleElement = event.target.closest('.article-item');
      if (articleElement) {
        articleElement.style.opacity = '0.5';
        articleElement.style.textDecoration = 'line-through';
      }
    } catch (error) {
      showNotification(`Failed to hide article: ${error.message}`, 'error');
    }
  }

  // Add notification styles
  const notificationStyles = `
    <style>
      .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        min-width: 300px;
        max-width: 500px;
        background: white;
        border: 1px solid #e8ebed;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        animation: slideIn 0.3s ease-out;
      }
      
      .notification-info { border-left: 4px solid #3b82f6; }
      .notification-success { border-left: 4px solid #10b981; }
      .notification-error { border-left: 4px solid #ef4444; }
      
      .notification-content {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 12px 16px;
      }
      
      .notification-message {
        font-size: 14px;
        color: #2a2a2a;
        line-height: 1.4;
      }
      
      .notification-close {
        background: none;
        border: none;
        font-size: 18px;
        color: #6b7280;
        cursor: pointer;
        padding: 0;
        margin-left: 12px;
      }
      
      .notification-close:hover {
        color: #2a2a2a;
      }
      
      .spinner {
        animation: spin 1s linear infinite;
      }
      
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      
      @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
    </style>
  `;
  
  document.head.insertAdjacentHTML('beforeend', notificationStyles);
</script>