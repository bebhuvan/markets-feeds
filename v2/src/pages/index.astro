---
export const prerender = false;

import Layout from '../layouts/Layout.astro';
import EnhancedHeader from '../components/EnhancedHeader.astro';
import EnhancedNavigation from '../components/EnhancedNavigation.astro';
import EnhancedArticle from '../components/EnhancedArticle.astro';
import EnhancedSidebar from '../components/EnhancedSidebar.astro';
import UserPreferences from '../components/UserPreferences.astro';
import { dataLoader } from '../lib/data-loader';
import { formatTimeAgo } from '../lib/utils';
import '../styles/global.css';

// Get page number
const page = parseInt(Astro.url.searchParams.get('page') || '1');

// Load data
const allItems = await dataLoader.loadData();
const categoryCounts = await dataLoader.getCategoryCounts();
const { items, totalPages, totalItems, hasNext, hasPrev } = dataLoader.paginate(allItems, page);

// Get last update time
const lastUpdate = allItems.length > 0 
  ? new Date(Math.max(...allItems.map(item => new Date(item.fetchedAt || item.publishedAt).getTime())))
  : new Date();

// Get source counts for sidebar
const sourceCounts = await dataLoader.getSourceCounts();
---

<Layout title="Markets Feeds v2 - Real-time Financial Intelligence">
  <EnhancedHeader lastUpdate={lastUpdate} totalArticles={allItems.length} />
  <EnhancedNavigation categoryCounts={categoryCounts} />
  
  <div class="container">
    <div class="content-grid">
      <!-- Main Feed -->
      <main class="feed">
        <div class="feed-header">
          <div class="feed-info">
            <h1 class="feed-title">
              <span class="feed-icon">üåê</span>
              All Sources
              <span class="live-indicator">‚óè Live</span>
            </h1>
            <div class="feed-meta">
              <span class="article-count">{totalItems.toLocaleString()} articles</span>
              <span class="update-time">Updated {formatTimeAgo(lastUpdate)}</span>
            </div>
          </div>
          
          <div class="feed-controls">
            <div class="view-options">
              <button class="view-btn active" data-view="cards">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                  <rect x="3" y="3" width="7" height="7"/>
                  <rect x="14" y="3" width="7" height="7"/>
                  <rect x="3" y="14" width="7" height="7"/>
                  <rect x="14" y="14" width="7" height="7"/>
                </svg>
              </button>
              <button class="view-btn" data-view="compact">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                  <line x1="3" y1="6" x2="21" y2="6"/>
                  <line x1="3" y1="12" x2="21" y2="12"/>
                  <line x1="3" y1="18" x2="21" y2="18"/>
                </svg>
              </button>
            </div>
          </div>
        </div>

        <div class="articles" id="articlesContainer">
          {items.map((article, index) => (
            <EnhancedArticle article={article} index={index} />
          ))}
        </div>

        {totalPages > 1 && (
          <div class="pagination">
            {hasPrev ? (
              <a href={`/?page=${page - 1}`} class="pagination-btn">
                ‚Üê Previous
              </a>
            ) : (
              <span class="pagination-btn disabled">‚Üê Previous</span>
            )}
            
            <span class="pagination-info">Page {page} of {totalPages}</span>
            
            {hasNext ? (
              <a href={`/?page=${page + 1}`} class="pagination-btn">
                Next ‚Üí
              </a>
            ) : (
              <span class="pagination-btn disabled">Next ‚Üí</span>
            )}
          </div>
        )}
      </main>
      
      <!-- Enhanced Sidebar -->
      <EnhancedSidebar sourceCounts={sourceCounts} categoryCounts={categoryCounts} />
    </div>
  </div>

  <!-- Mobile Sidebar Toggle -->
  <button class="mobile-sidebar-toggle" aria-label="Toggle sidebar">
    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
  </button>

  <!-- Sidebar Overlay -->
  <div class="sidebar-overlay"></div>

  <!-- User Preferences -->
  <UserPreferences />
</Layout>

<script>
  // Mobile sidebar toggle
  const toggleBtn = document.querySelector('.mobile-sidebar-toggle');
  const sidebar = document.querySelector('.sidebar');
  const overlay = document.querySelector('.sidebar-overlay');

  if (toggleBtn && sidebar && overlay) {
    toggleBtn.addEventListener('click', () => {
      sidebar.classList.toggle('active');
      overlay.classList.toggle('active');
    });

    overlay.addEventListener('click', () => {
      sidebar.classList.remove('active');
      overlay.classList.remove('active');
    });
  }

  // View switching functionality
  const viewButtons = document.querySelectorAll('.view-btn');
  const articlesContainer = document.getElementById('articlesContainer');
  
  viewButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      const view = btn.getAttribute('data-view');
      
      // Update active state
      viewButtons.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      
      // Apply view class
      if (articlesContainer) {
        articlesContainer.className = `articles view-${view}`;
        localStorage.setItem('preferredView', view);
      }
    });
  });
  
  // Restore preferred view
  const preferredView = localStorage.getItem('preferredView');
  if (preferredView && articlesContainer) {
    articlesContainer.className = `articles view-${preferredView}`;
    const activeBtn = document.querySelector(`[data-view="${preferredView}"]`);
    if (activeBtn) {
      viewButtons.forEach(b => b.classList.remove('active'));
      activeBtn.classList.add('active');
    }
  }
</script>

<style>
  /* Enhanced Feed Header */
  .feed-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 32px;
    padding: 24px;
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 1px solid #e2e8f0;
    border-radius: 16px;
  }

  .feed-info {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .feed-title {
    display: flex;
    align-items: center;
    gap: 12px;
    font-size: 24px;
    font-weight: 700;
    color: #1f2937;
    margin: 0;
  }

  .feed-icon {
    font-size: 28px;
  }

  .live-indicator {
    font-size: 12px;
    color: #16a34a;
    background: #dcfce7;
    padding: 4px 8px;
    border-radius: 12px;
    font-weight: 600;
    animation: pulse 2s infinite;
  }

  .feed-meta {
    display: flex;
    align-items: center;
    gap: 16px;
    font-size: 14px;
  }

  .article-count {
    color: #374151;
    font-weight: 600;
  }

  .update-time {
    color: #6b7280;
  }

  .feed-controls {
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .view-options {
    display: flex;
    gap: 4px;
    background: #ffffff;
    padding: 4px;
    border-radius: 8px;
    border: 1px solid #e5e7eb;
  }

  .view-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border: none;
    border-radius: 4px;
    background: transparent;
    color: #6b7280;
    cursor: pointer;
    transition: all 0.15s ease;
  }

  .view-btn:hover {
    background: #f9fafb;
    color: #374151;
  }

  .view-btn.active {
    background: #2563eb;
    color: white;
  }

  /* View Modes */
  .articles.view-compact .enhanced-article {
    padding: 12px 16px;
    margin-bottom: 8px;
    border-radius: 8px;
  }

  .articles.view-compact .article-content {
    margin-bottom: 8px;
  }

  .articles.view-compact .article-title {
    font-size: 14px;
    margin-bottom: 6px;
  }

  .articles.view-compact .article-summary {
    display: none;
  }

  .articles.view-compact .article-actions {
    display: none;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .feed-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 16px;
      padding: 20px;
    }

    .feed-title {
      font-size: 20px;
    }

    .feed-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 4px;
    }

    .feed-controls {
      width: 100%;
      justify-content: flex-end;
    }
  }

  @media (max-width: 480px) {
    .feed-header {
      padding: 16px;
      margin-bottom: 24px;
    }

    .feed-title {
      font-size: 18px;
    }

    .view-options {
      padding: 2px;
    }

    .view-btn {
      width: 32px;
      height: 32px;
    }
  }
</style>